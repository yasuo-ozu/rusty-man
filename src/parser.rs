// SPDX-FileCopyrightText: 2020 Robin Krahl <robin.krahl@ireas.org>
// SPDX-License-Identifier: MIT

//! Parses HTML files generated by rustdoc.
//!
//! For details on the format of the parsed HTML files, check the following items in the
//! `html::render` module of `librustdoc` (in the Rust source):
//! - The `krate` and `render_item` methods of the `Context` struct are the main entry points for
//!   the rendering.
//! - The `print_item` and `item_*`functions generate the HTML for an item (module, struct, â€¦).
//! - The `AllTypes::print` function generates the HTML for the `all.html` page using the
//!   `print_entries` function.

use std::path;

use anyhow::Context;

use crate::doc;

/// Parses the HTML document at the given path and returns the DOM.
fn parse_file<P: AsRef<path::Path>>(path: P) -> anyhow::Result<kuchiki::NodeRef> {
    use kuchiki::traits::TendrilSink;

    kuchiki::parse_html()
        .from_utf8()
        .from_file(path)
        .context("Could not read HTML file")
}

pub fn find_item<P: AsRef<path::Path>>(path: P, item: &str) -> anyhow::Result<Option<String>> {
    use std::ops::Deref;

    let document = parse_file(path)?;
    let item = select(&document, "ul.docblock li a")?
        .find(|e| e.text_contents() == item)
        .and_then(|e| get_attribute(e.deref(), "href"));
    Ok(item)
}

pub fn parse_doc<P: AsRef<path::Path>>(path: P) -> anyhow::Result<doc::Doc> {
    let document = parse_file(path)?;
    let heading = select_first(&document, ".fqn .in-band")?.context("Could not find heading")?;
    let definition = select_first(&document, ".docblock.type-decl")?;
    let description = select_first(&document, ".docblock:not(.type-decl)")?;

    let mut doc = doc::Doc::new(get_html(heading.as_node())?);
    doc.description = description.map(|n| get_html(n.as_node())).transpose()?;
    doc.definition = definition.map(|n| get_html(n.as_node())).transpose()?;
    Ok(doc)
}

fn select(
    element: &kuchiki::NodeRef,
    selector: &str,
) -> anyhow::Result<kuchiki::iter::Select<kuchiki::iter::Elements<kuchiki::iter::Descendants>>> {
    element
        .select(selector)
        .ok()
        .with_context(|| format!("Could not apply selector {}", selector))
}

fn select_first(
    element: &kuchiki::NodeRef,
    selector: &str,
) -> anyhow::Result<Option<kuchiki::NodeDataRef<kuchiki::ElementData>>> {
    select(element, selector).map(|mut i| i.next())
}

fn get_attribute(element: &kuchiki::ElementData, name: &str) -> Option<String> {
    element.attributes.borrow().get(name).map(ToOwned::to_owned)
}

fn get_html(node: &kuchiki::NodeRef) -> anyhow::Result<String> {
    let mut vec: Vec<u8> = Vec::new();
    node.serialize(&mut vec)?;
    String::from_utf8(vec).context("Could not convert node to HTML")
}

#[cfg(test)]
mod tests {
    #[test]
    fn test_find_item() {
        let path = crate::tests::ensure_docs();
        let path = path.join("kuchiki").join("all.html");
        assert_eq!(None, super::find_item(&path, "foobar").unwrap());
        assert_eq!(
            Some("struct.NodeRef.html".to_owned()),
            super::find_item(&path, "NodeRef").unwrap()
        );
    }

    #[test]
    fn test_parse_doc_struct() {
        let path = crate::tests::ensure_docs();
        let path = path.join("kuchiki").join("struct.NodeRef.html");
        let doc = super::parse_doc(&path).unwrap();

        assert_eq!(
            "<span class=\"in-band\">\
             Struct <a href=\"index.html\">kuchiki</a>::<wbr>\
             <a class=\"struct\" href=\"\">NodeRef</a>\
             </span>",
            &doc.title
        );
        assert!(doc.definition.is_some());
        assert!(doc.description.is_some());
    }
}
