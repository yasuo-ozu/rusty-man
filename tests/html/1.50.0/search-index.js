var searchIndex = JSON.parse('{\
"anyhow":{"doc":"github crates-io docs-rs","i":[[3,"Error","anyhow","The <code>Error</code> type, a wrapper around a dynamic error type.",null,null],[3,"Chain","","Iterator of a chain of source errors.",null,null],[6,"Result","","<code>Result<T, Error></code>",null,null],[8,"Context","","Provides the <code>context</code> method for <code>Result</code>.",null,null],[10,"context","","Wrap the error value with additional context.",0,[[],[["error",3],["result",6]]]],[10,"with_context","","Wrap the error value with additional context that is …",0,[[],[["error",3],["result",6]]]],[14,"bail","","Return early with an error.",null,null],[14,"ensure","","Return early with an error if a condition is not …",null,null],[14,"anyhow","","Construct an ad-hoc error from a string.",null,null],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"drop","","",1,[[]]],[11,"as_ref","","",1,[[],["stderror",8]]],[11,"as_ref","","",1,[[],["stderror",8]]],[11,"from","","",1,[[]]],[11,"next_back","","",2,[[],["option",4]]],[11,"len","","",2,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"clone","","",2,[[],["chain",3]]],[11,"default","","",2,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"new","","",2,[[["stderror",8]]]],[11,"new","","Create a new error object from any error type.",1,[[]]],[11,"msg","","Create a new error object from a printable error message.",1,[[]]],[11,"context","","Wrap the error value with additional context.",1,[[]]],[11,"chain","","An iterator of the chain of source errors contained by …",1,[[],["chain",3]]],[11,"root_cause","","The lowest level cause of this error — this error\'s …",1,[[],["stderror",8]]],[11,"is","","Returns true if <code>E</code> is the type held by this error object.",1,[[]]],[11,"downcast","","Attempt to downcast the error object to a concrete type.",1,[[],["result",4]]],[11,"downcast_ref","","Downcast this error object by reference.",1,[[],["option",4]]],[11,"downcast_mut","","Downcast this error object by mutable reference.",1,[[],["option",4]]]],"p":[[8,"Context"],[3,"Error"],[3,"Chain"]]},\
"kuchiki":{"doc":"Kuchiki (朽木), a HTML/XML tree manipulation library …","i":[[0,"iter","kuchiki","Node iterators",null,null],[3,"Siblings","kuchiki::iter","A double-ended iterator of sibling nodes.",null,null],[3,"Ancestors","","An iterator on ancestor nodes.",null,null],[3,"Descendants","","An iterator of references to a given node and its …",null,null],[4,"NodeEdge","","Marks either the start or the end of a node.",null,null],[13,"Start","","Indicates that start of a node that has children. Yielded …",0,null],[13,"End","","Indicates that end of a node that has children. Yielded …",0,null],[3,"Traverse","","An iterator of the start and end edges of the nodes in a …",null,null],[3,"Elements","","A node iterator adaptor that yields element nodes.",null,null],[12,"0","","",1,null],[3,"Comments","","A node iterator adaptor that yields comment nodes.",null,null],[12,"0","","",2,null],[3,"TextNodes","","A node iterator adaptor that yields text nodes.",null,null],[12,"0","","",3,null],[3,"Select","","An element iterator adaptor that yields elements maching …",null,null],[12,"iter","","The underlying iterator.",4,null],[12,"selectors","","The selectors to be matched.",4,null],[8,"NodeIterator","","Convenience methods for node iterators.",null,null],[11,"elements","","Filter this element iterator to elements.",5,[[],["elements",3]]],[11,"text_nodes","","Filter this node iterator to text nodes.",5,[[],["textnodes",3]]],[11,"comments","","Filter this node iterator to comment nodes.",5,[[],["comments",3]]],[11,"select","","Filter this node iterator to elements maching the given …",5,[[],[["select",3],["result",4]]]],[8,"ElementIterator","","Convenience methods for element iterators.",null,null],[11,"select","","Filter this element iterator to elements maching the …",6,[[],[["select",3],["result",4]]]],[0,"traits","kuchiki","This module re-exports a number of traits that are useful …",null,null],[8,"TendrilSink","kuchiki::traits","Trait for types that can process a tendril.",null,null],[10,"process","","Process this tendril.",7,[[["tendril",3]]]],[10,"error","","Indicates that an error has occurred.",7,[[["cow",4]]]],[16,"Output","","What the overall result of processing is.",7,null],[10,"finish","","Indicates the end of the stream.",7,[[]]],[11,"one","","Process one tendril and finish.",7,[[]]],[11,"from_iter","","Consume an iterator of tendrils, processing each item, …",7,[[]]],[11,"read_from","","Read from the given stream of bytes until exhaustion and …",7,[[],[["error",3],["result",4]]]],[11,"from_file","","Read from the file at the given path and process …",7,[[],[["error",3],["result",4]]]],[3,"Attribute","kuchiki","The non-identifying parts of an attribute",null,null],[12,"prefix","","The namespace prefix, if any",8,null],[12,"value","","The attribute value",8,null],[3,"Attributes","","Convenience wrapper around a btreemap that adds method …",null,null],[12,"map","","A map of attributes whose name can have namespaces.",9,null],[3,"ExpandedName","","https://www.w3.org/TR/REC-xml-names/#dt-expname",null,null],[12,"ns","","Namespace URL",10,null],[12,"local","","\\\"Local\\\" part of the name",10,null],[3,"NodeDataRef","","Holds a strong reference to a node, but dereferences to …",null,null],[5,"parse_html","","Parse an HTML document with html5ever and the default …",null,[[],[["sink",3],["parser",3]]]],[5,"parse_html_with_options","","Parse an HTML document with html5ever with custom …",null,[[["parseopts",3]],[["sink",3],["parser",3]]]],[3,"ParseOpts","","Options for the HTML parser.",null,null],[12,"tokenizer","","Options for the HTML tokenizer.",11,null],[12,"tree_builder","","Options for the HTML tree builder.",11,null],[12,"on_parse_error","","A callback for HTML parse errors (which are never fatal).",11,null],[3,"Selector","","A pre-compiled CSS Selector.",null,null],[3,"Selectors","","A pre-compiled list of CSS Selectors.",null,null],[12,"0","","",12,null],[3,"Specificity","","The specificity of a selector.",null,null],[3,"Doctype","","Data specific to doctype nodes.",null,null],[12,"name","","The name of the doctype",13,null],[12,"public_id","","The public ID of the doctype",13,null],[12,"system_id","","The system ID of the doctype",13,null],[3,"DocumentData","","Data specific to document nodes.",null,null],[3,"ElementData","","Data specific to element nodes.",null,null],[12,"name","","The namespace and local name of the element, such as …",14,null],[12,"attributes","","The attributes of the elements.",14,null],[12,"template_contents","","If the element is an HTML <code><template></code> element, the …",14,null],[3,"Node","","A node inside a DOM-like tree.",null,null],[4,"NodeData","","Node data specific to the node type.",null,null],[13,"Element","","Element node",15,null],[13,"Text","","Text node",15,null],[13,"Comment","","Comment node",15,null],[13,"ProcessingInstruction","","Processing instruction node",15,null],[13,"Doctype","","Doctype node",15,null],[13,"Document","","Document node",15,null],[13,"DocumentFragment","","Document fragment node",15,null],[3,"NodeRef","","A strong reference to a node.",null,null],[12,"0","","",16,null],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","kuchiki::iter","",17,[[]]],[11,"into","","",17,[[]]],[11,"into_iter","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"into_iter","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","kuchiki","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"drop","","",25,[[]]],[11,"next_back","kuchiki::iter","",17,[[],[["noderef",3],["option",4]]]],[11,"next_back","","",19,[[],[["noderef",3],["option",4]]]],[11,"next_back","","",20,[[],[["option",4],["nodeedge",4]]]],[11,"next_back","","",1,[[],[["option",4],["nodedataref",3]]]],[11,"next_back","","",2,[[],[["nodedataref",3],["option",4]]]],[11,"next_back","","",3,[[],[["nodedataref",3],["option",4]]]],[11,"next_back","","",4,[[],[["option",4],["nodedataref",3]]]],[11,"next","","",17,[[],[["noderef",3],["option",4]]]],[11,"next","","",18,[[],[["noderef",3],["option",4]]]],[11,"next","","",19,[[],[["noderef",3],["option",4]]]],[11,"next","","",20,[[],[["option",4],["nodeedge",4]]]],[11,"next","","",1,[[],[["option",4],["nodedataref",3]]]],[11,"next","","",2,[[],[["nodedataref",3],["option",4]]]],[11,"next","","",3,[[],[["nodedataref",3],["option",4]]]],[11,"next","","",4,[[],[["option",4],["nodedataref",3]]]],[11,"clone","kuchiki","",9,[[],["attributes",3]]],[11,"clone","","",10,[[],["expandedname",3]]],[11,"clone","","",8,[[],["attribute",3]]],[11,"clone","kuchiki::iter","",17,[[],["siblings",3]]],[11,"clone","","",18,[[],["ancestors",3]]],[11,"clone","","",19,[[],["descendants",3]]],[11,"clone","","",0,[[],["nodeedge",4]]],[11,"clone","","",20,[[],["traverse",3]]],[11,"clone","","",1,[[],["elements",3]]],[11,"clone","","",2,[[],["comments",3]]],[11,"clone","","",3,[[],["textnodes",3]]],[11,"clone","kuchiki","",21,[[]]],[11,"clone","","",23,[[],["specificity",3]]],[11,"clone","","",15,[[],["nodedata",4]]],[11,"clone","","",13,[[],["doctype",3]]],[11,"clone","","",14,[[],["elementdata",3]]],[11,"clone","","",24,[[],["documentdata",3]]],[11,"clone","","",16,[[],["noderef",3]]],[11,"default","","",11,[[],["parseopts",3]]],[11,"cmp","","",10,[[["expandedname",3]],["ordering",4]]],[11,"cmp","","",23,[[["specificity",3]],["ordering",4]]],[11,"eq","","",9,[[["attributes",3]]]],[11,"ne","","",9,[[["attributes",3]]]],[11,"eq","","",10,[[["expandedname",3]]]],[11,"ne","","",10,[[["expandedname",3]]]],[11,"eq","","",8,[[["attribute",3]]]],[11,"ne","","",8,[[["attribute",3]]]],[11,"eq","kuchiki::iter","",0,[[["nodeedge",4]]]],[11,"ne","","",0,[[["nodeedge",4]]]],[11,"eq","kuchiki","",21,[[]]],[11,"eq","","",23,[[["specificity",3]]]],[11,"ne","","",23,[[["specificity",3]]]],[11,"eq","","",15,[[["nodedata",4]]]],[11,"ne","","",15,[[["nodedata",4]]]],[11,"eq","","",13,[[["doctype",3]]]],[11,"ne","","",13,[[["doctype",3]]]],[11,"eq","","",14,[[["elementdata",3]]]],[11,"ne","","",14,[[["elementdata",3]]]],[11,"eq","","",24,[[["documentdata",3]]]],[11,"ne","","",24,[[["documentdata",3]]]],[11,"eq","","",16,[[["noderef",3]]]],[11,"partial_cmp","","",10,[[["expandedname",3]],[["option",4],["ordering",4]]]],[11,"lt","","",10,[[["expandedname",3]]]],[11,"le","","",10,[[["expandedname",3]]]],[11,"gt","","",10,[[["expandedname",3]]]],[11,"ge","","",10,[[["expandedname",3]]]],[11,"partial_cmp","","",23,[[["specificity",3]],[["option",4],["ordering",4]]]],[11,"lt","","",23,[[["specificity",3]]]],[11,"le","","",23,[[["specificity",3]]]],[11,"gt","","",23,[[["specificity",3]]]],[11,"ge","","",23,[[["specificity",3]]]],[11,"to_string","","",16,[[],["string",3]]],[11,"deref","","",21,[[]]],[11,"deref","","",16,[[],["node",3]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","kuchiki::iter","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","kuchiki","",21,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"hash","","",10,[[]]],[11,"hash","","",23,[[]]],[11,"from_str","","",12,[[],[["selectors",3],["result",4]]]],[11,"serialize","","",16,[[["traversalscope",4]],["result",6]]],[11,"opaque","","",21,[[],["opaqueelement",3]]],[11,"is_html_slot_element","","",21,[[]]],[11,"parent_node_is_shadow_root","","",21,[[]]],[11,"containing_shadow_host","","",21,[[],["option",4]]],[11,"parent_element","","",21,[[],["option",4]]],[11,"prev_sibling_element","","",21,[[],["option",4]]],[11,"next_sibling_element","","",21,[[],["option",4]]],[11,"is_empty","","",21,[[]]],[11,"is_root","","",21,[[]]],[11,"is_html_element_in_html_document","","",21,[[]]],[11,"has_local_name","","",21,[[["localname",6]]]],[11,"has_namespace","","",21,[[["namespace",6]]]],[11,"is_part","","",21,[[["localname",6]]]],[11,"exported_part","","",21,[[["localname",6]],[["option",4],["localname",6]]]],[11,"imported_part","","",21,[[["localname",6]],[["option",4],["localname",6]]]],[11,"is_pseudo_element","","",21,[[]]],[11,"is_same_type","","",21,[[]]],[11,"is_link","","",21,[[]]],[11,"has_id","","",21,[[["localname",6],["casesensitivity",4]]]],[11,"has_class","","",21,[[["localname",6],["casesensitivity",4]]]],[11,"attr_matches","","",21,[[["localname",6],["namespaceconstraint",4],["attrselectoroperation",4]]]],[11,"match_pseudo_element","","",21,[[["pseudoelement",4],["matchingcontext",3]]]],[11,"match_non_ts_pseudo_class","","",21,[[["pseudoclass",4],["matchingcontext",3]]]],[11,"new","","Trivial constructor",10,[[["namespace",6],["into",8],["localname",6],["into",8]]]],[11,"contains","","Like BTreeMap::contains",9,[[["into",8],["localname",6]]]],[11,"get","","Like BTreeMap::get",9,[[["into",8],["localname",6]],["option",4]]],[11,"get_mut","","Like BTreeMap::get_mut",9,[[["into",8],["localname",6]],[["option",4],["string",3]]]],[11,"entry","","Like BTreeMap::entry",9,[[["into",8],["localname",6]],[["entry",4],["attribute",3],["expandedname",3]]]],[11,"insert","","Like BTreeMap::insert",9,[[["string",3],["into",8],["localname",6]],[["option",4],["attribute",3]]]],[11,"remove","","Like BTreeMap::remove",9,[[["into",8],["localname",6]],[["option",4],["attribute",3]]]],[11,"inclusive_ancestors","","Return an iterator of references to this node and its …",16,[[],["ancestors",3]]],[11,"ancestors","","Return an iterator of references to this node’s …",16,[[],["ancestors",3]]],[11,"inclusive_preceding_siblings","","Return an iterator of references to this node and the …",16,[[],[["siblings",3],["rev",3]]]],[11,"preceding_siblings","","Return an iterator of references to this node’s …",16,[[],[["siblings",3],["rev",3]]]],[11,"inclusive_following_siblings","","Return an iterator of references to this node and the …",16,[[],["siblings",3]]],[11,"following_siblings","","Return an iterator of references to this node’s …",16,[[],["siblings",3]]],[11,"children","","Return an iterator of references to this node’s …",16,[[],["siblings",3]]],[11,"inclusive_descendants","","Return an iterator of references to this node and its …",16,[[],["descendants",3]]],[11,"descendants","","Return an iterator of references to this node’s …",16,[[],["descendants",3]]],[11,"traverse_inclusive","","Return an iterator of the start and end edges of this …",16,[[],["traverse",3]]],[11,"traverse","","Return an iterator of the start and end edges of this …",16,[[],["traverse",3]]],[11,"select","","Return an iterator of the inclusive descendants element …",16,[[],[["select",3],["result",4]]]],[11,"select_first","","Return the first inclusive descendants element that match …",16,[[],[["result",4],["nodedataref",3]]]],[11,"into_element_ref","","If this node is an element, return a strong reference to …",16,[[],[["option",4],["nodedataref",3]]]],[11,"into_text_ref","","If this node is a text node, return a strong reference to …",16,[[],[["nodedataref",3],["option",4]]]],[11,"into_comment_ref","","If this node is a comment, return a strong reference to …",16,[[],[["nodedataref",3],["option",4]]]],[11,"into_doctype_ref","","If this node is a doctype, return a strong reference to …",16,[[],[["nodedataref",3],["option",4]]]],[11,"into_document_ref","","If this node is a document, return a strong reference to …",16,[[],[["option",4],["nodedataref",3]]]],[11,"new","","Create a <code>NodeDataRef</code> for a component in a given node.",21,[[["noderef",3]],["nodedataref",3]]],[11,"new_opt","","Create a <code>NodeDataRef</code> for and a component that may or may …",21,[[["noderef",3]],[["nodedataref",3],["option",4]]]],[11,"as_node","","Access the corresponding node.",21,[[],["noderef",3]]],[11,"text_contents","","Return the concatenation of all text nodes in this …",21,[[],["string",3]]],[11,"compile","","Compile a list of selectors. This may fail on syntax …",12,[[],[["selectors",3],["result",4]]]],[11,"matches","","Returns whether the given element matches this list of …",12,[[["nodedataref",3]]]],[11,"filter","","Filter an element iterator, yielding those matching this …",12,[[],[["select",3],["selectors",3]]]],[11,"matches","","Returns whether the given element matches this selector.",22,[[["nodedataref",3]]]],[11,"specificity","","Return the specificity of this selector.",22,[[],["specificity",3]]],[11,"serialize","","Serialize this node and its descendants in HTML syntax to …",16,[[],["result",6]]],[11,"serialize_to_file","","Serialize this node and its descendants in HTML syntax to …",16,[[["asref",8],["path",3]],["result",6]]],[11,"quirks_mode","","The quirks mode of the document, as determined by the …",24,[[],["quirksmode",4]]],[11,"new","","Create a new node.",16,[[["nodedata",4]],["noderef",3]]],[11,"new_element","","Create a new element node.",16,[[["qualname",3]],["noderef",3]]],[11,"new_text","","Create a new text node.",16,[[["string",3],["into",8]],["noderef",3]]],[11,"new_comment","","Create a new comment node.",16,[[["string",3],["into",8]],["noderef",3]]],[11,"new_processing_instruction","","Create a new processing instruction node.",16,[[],["noderef",3]]],[11,"new_doctype","","Create a new doctype node.",16,[[],["noderef",3]]],[11,"new_document","","Create a new document node.",16,[[],["noderef",3]]],[11,"text_contents","","Return the concatenation of all text nodes in this …",16,[[],["string",3]]],[11,"data","","Return a reference to this node’s node-type-specific …",25,[[],["nodedata",4]]],[11,"as_element","","If this node is an element, return a reference to …",25,[[],[["option",4],["elementdata",3]]]],[11,"as_text","","If this node is a text node, return a reference to its …",25,[[],[["refcell",3],["option",4]]]],[11,"as_comment","","If this node is a comment, return a reference to its …",25,[[],[["refcell",3],["option",4]]]],[11,"as_doctype","","If this node is a document, return a reference to …",25,[[],[["doctype",3],["option",4]]]],[11,"as_document","","If this node is a document, return a reference to …",25,[[],[["option",4],["documentdata",3]]]],[11,"parent","","Return a reference to the parent node, unless this node …",25,[[],[["noderef",3],["option",4]]]],[11,"first_child","","Return a reference to the first child of this node, …",25,[[],[["noderef",3],["option",4]]]],[11,"last_child","","Return a reference to the last child of this node, unless …",25,[[],[["noderef",3],["option",4]]]],[11,"previous_sibling","","Return a reference to the previous sibling of this node, …",25,[[],[["noderef",3],["option",4]]]],[11,"next_sibling","","Return a reference to the previous sibling of this node, …",25,[[],[["noderef",3],["option",4]]]],[11,"detach","","Detach a node from its parent and siblings. Children are …",25,[[]]],[11,"append","","Append a new child to this node, after existing children.",16,[[["noderef",3]]]],[11,"prepend","","Prepend a new child to this node, before existing …",16,[[["noderef",3]]]],[11,"insert_after","","Insert a new sibling after this node.",16,[[["noderef",3]]]],[11,"insert_before","","Insert a new sibling before this node.",16,[[["noderef",3]]]]],"p":[[4,"NodeEdge"],[3,"Elements"],[3,"Comments"],[3,"TextNodes"],[3,"Select"],[8,"NodeIterator"],[8,"ElementIterator"],[8,"TendrilSink"],[3,"Attribute"],[3,"Attributes"],[3,"ExpandedName"],[3,"ParseOpts"],[3,"Selectors"],[3,"Doctype"],[3,"ElementData"],[4,"NodeData"],[3,"NodeRef"],[3,"Siblings"],[3,"Ancestors"],[3,"Descendants"],[3,"Traverse"],[3,"NodeDataRef"],[3,"Selector"],[3,"Specificity"],[3,"DocumentData"],[3,"Node"]]},\
"log":{"doc":"A lightweight logging facade.","i":[[4,"Level","log","An enum representing the available verbosity levels of …",null,null],[13,"Error","","The \\\"error\\\" level.",0,null],[13,"Warn","","The \\\"warn\\\" level.",0,null],[13,"Info","","The \\\"info\\\" level.",0,null],[13,"Debug","","The \\\"debug\\\" level.",0,null],[13,"Trace","","The \\\"trace\\\" level.",0,null],[11,"max","","Returns the most verbose logging level.",0,[[],["level",4]]],[11,"to_level_filter","","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.",0,[[],["levelfilter",4]]],[4,"LevelFilter","","An enum representing the available verbosity level …",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the <code>Error</code> log level.",1,null],[13,"Warn","","Corresponds to the <code>Warn</code> log level.",1,null],[13,"Info","","Corresponds to the <code>Info</code> log level.",1,null],[13,"Debug","","Corresponds to the <code>Debug</code> log level.",1,null],[13,"Trace","","Corresponds to the <code>Trace</code> log level.",1,null],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter",4]]],[11,"to_level","","Converts <code>self</code> to the equivalent <code>Level</code>.",1,[[],[["level",4],["option",4]]]],[3,"Record","","The \\\"payload\\\" of a log message.",null,null],[11,"builder","","Returns a new builder.",2,[[],["recordbuilder",3]]],[11,"args","","The message body.",2,[[],["arguments",3]]],[11,"metadata","","Metadata about the log directive.",2,[[],["metadata",3]]],[11,"level","","The verbosity level of the message.",2,[[],["level",4]]],[11,"target","","The name of the target of the directive.",2,[[]]],[11,"module_path","","The module path of the message.",2,[[],["option",4]]],[11,"module_path_static","","The module path of the message, if it is a <code>\'static</code> string.",2,[[],["option",4]]],[11,"file","","The source file containing the message.",2,[[],["option",4]]],[11,"file_static","","The module path of the message, if it is a <code>\'static</code> string.",2,[[],["option",4]]],[11,"line","","The line containing the message.",2,[[],["option",4]]],[3,"RecordBuilder","","Builder for <code>Record</code>.",null,null],[11,"new","","Construct new <code>RecordBuilder</code>.",3,[[],["recordbuilder",3]]],[11,"args","","Set <code>args</code>.",3,[[["arguments",3]],["recordbuilder",3]]],[11,"metadata","","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …",3,[[["metadata",3]],["recordbuilder",3]]],[11,"level","","Set <code>Metadata::level</code>.",3,[[["level",4]],["recordbuilder",3]]],[11,"target","","Set <code>Metadata::target</code>",3,[[],["recordbuilder",3]]],[11,"module_path","","Set <code>module_path</code>",3,[[["option",4]],["recordbuilder",3]]],[11,"module_path_static","","Set <code>module_path</code> to a <code>\'static</code> string",3,[[["option",4]],["recordbuilder",3]]],[11,"file","","Set <code>file</code>",3,[[["option",4]],["recordbuilder",3]]],[11,"file_static","","Set <code>file</code> to a <code>\'static</code> string.",3,[[["option",4]],["recordbuilder",3]]],[11,"line","","Set <code>line</code>",3,[[["option",4]],["recordbuilder",3]]],[11,"build","","Invoke the builder and return a <code>Record</code>",3,[[],["record",3]]],[3,"Metadata","","Metadata about a log message.",null,null],[11,"builder","","Returns a new builder.",4,[[],["metadatabuilder",3]]],[11,"level","","The verbosity level of the message.",4,[[],["level",4]]],[11,"target","","The name of the target of the directive.",4,[[]]],[3,"MetadataBuilder","","Builder for <code>Metadata</code>.",null,null],[11,"new","","Construct a new <code>MetadataBuilder</code>.",5,[[],["metadatabuilder",3]]],[11,"level","","Setter for <code>level</code>.",5,[[["level",4]],["metadatabuilder",3]]],[11,"target","","Setter for <code>target</code>.",5,[[],["metadatabuilder",3]]],[11,"build","","Returns a <code>Metadata</code> object.",5,[[],["metadata",3]]],[8,"Log","","A trait encapsulating the operations required of a logger.",null,null],[10,"enabled","","Determines if a log message with the specified metadata …",6,[[["metadata",3]]]],[10,"log","","Logs the <code>Record</code>.",6,[[["record",3]]]],[10,"flush","","Flushes any buffered records.",6,[[]]],[5,"set_max_level","","Sets the global maximum log level.",null,[[["levelfilter",4]]]],[5,"max_level","","Returns the current maximum log level.",null,[[],["levelfilter",4]]],[5,"set_boxed_logger","","Sets the global logger to a <code>Box<Log></code>.",null,[[["box",3],["log",8]],[["result",4],["setloggererror",3]]]],[5,"set_logger","","Sets the global logger to a <code>&\'static Log</code>.",null,[[["log",8]],[["result",4],["setloggererror",3]]]],[5,"set_logger_racy","","A thread-unsafe version of <code>set_logger</code>.",null,[[["log",8]],[["result",4],["setloggererror",3]]]],[3,"SetLoggerError","","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …",null,null],[3,"ParseLevelError","","The type returned by <code>from_str</code> when the string doesn\'t …",null,null],[5,"logger","","Returns a reference to the logger.",null,[[],["log",8]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",null,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in …",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"clone","","",0,[[],["level",4]]],[11,"clone","","",1,[[],["levelfilter",4]]],[11,"clone","","",2,[[],["record",3]]],[11,"clone","","",4,[[],["metadata",3]]],[11,"cmp","","",0,[[["level",4]],["ordering",4]]],[11,"cmp","","",1,[[["levelfilter",4]],["ordering",4]]],[11,"cmp","","",4,[[["metadata",3]],["ordering",4]]],[11,"cmp","","",5,[[["metadatabuilder",3]],["ordering",4]]],[11,"eq","","",0,[[["level",4]]]],[11,"eq","","",0,[[["levelfilter",4]]]],[11,"eq","","",1,[[["levelfilter",4]]]],[11,"eq","","",1,[[["level",4]]]],[11,"eq","","",4,[[["metadata",3]]]],[11,"ne","","",4,[[["metadata",3]]]],[11,"eq","","",5,[[["metadatabuilder",3]]]],[11,"ne","","",5,[[["metadatabuilder",3]]]],[11,"eq","","",8,[[["parselevelerror",3]]]],[11,"ne","","",8,[[["parselevelerror",3]]]],[11,"partial_cmp","","",0,[[["level",4]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["level",4]]]],[11,"le","","",0,[[["level",4]]]],[11,"gt","","",0,[[["level",4]]]],[11,"ge","","",0,[[["level",4]]]],[11,"partial_cmp","","",0,[[["levelfilter",4]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["levelfilter",4]]]],[11,"le","","",0,[[["levelfilter",4]]]],[11,"gt","","",0,[[["levelfilter",4]]]],[11,"ge","","",0,[[["levelfilter",4]]]],[11,"partial_cmp","","",1,[[["levelfilter",4]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["levelfilter",4]]]],[11,"le","","",1,[[["levelfilter",4]]]],[11,"gt","","",1,[[["levelfilter",4]]]],[11,"ge","","",1,[[["levelfilter",4]]]],[11,"partial_cmp","","",1,[[["level",4]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["level",4]]]],[11,"le","","",1,[[["level",4]]]],[11,"gt","","",1,[[["level",4]]]],[11,"ge","","",1,[[["level",4]]]],[11,"partial_cmp","","",4,[[["metadata",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["metadata",3]]]],[11,"le","","",4,[[["metadata",3]]]],[11,"gt","","",4,[[["metadata",3]]]],[11,"ge","","",4,[[["metadata",3]]]],[11,"partial_cmp","","",5,[[["metadatabuilder",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["metadatabuilder",3]]]],[11,"le","","",5,[[["metadatabuilder",3]]]],[11,"gt","","",5,[[["metadatabuilder",3]]]],[11,"ge","","",5,[[["metadatabuilder",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"from_str","","",0,[[],[["level",4],["result",4]]]],[11,"from_str","","",1,[[],[["levelfilter",4],["result",4]]]]],"p":[[4,"Level"],[4,"LevelFilter"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[8,"Log"],[3,"SetLoggerError"],[3,"ParseLevelError"]]},\
"rand_core":{"doc":"Random number generation traits","i":[[0,"block","rand_core","The <code>BlockRngCore</code> trait and implementation helpers",null,null],[8,"BlockRngCore","rand_core::block","A trait for RNGs which do not generate random numbers …",null,null],[16,"Item","","Results element type, e.g. <code>u32</code>.",0,null],[16,"Results","","Results type. This is the \'block\' an RNG implementing …",0,null],[10,"generate","","Generate a new block of results.",0,[[]]],[3,"BlockRng","","A wrapper type implementing [<code>RngCore</code>] for some type …",null,null],[12,"core","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …",1,null],[11,"new","","Create a new <code>BlockRng</code> from an existing RNG implementing …",1,[[],["blockrng",3]]],[11,"index","","Get the index into the result buffer.",1,[[]]],[11,"reset","","Reset the number of available results. This will force a …",1,[[]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the …",1,[[]]],[3,"BlockRng64","","A wrapper type implementing [<code>RngCore</code>] for some type …",null,null],[12,"core","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …",2,null],[11,"new","","Create a new <code>BlockRng</code> from an existing RNG implementing …",2,[[],["blockrng64",3]]],[11,"index","","Get the index into the result buffer.",2,[[]]],[11,"reset","","Reset the number of available results. This will force a …",2,[[]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the …",2,[[]]],[0,"impls","rand_core","Helper functions for implementing <code>RngCore</code> functions.",null,null],[5,"next_u64_via_u32","rand_core::impls","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.",null,[[]]],[5,"fill_bytes_via_next","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …",null,[[]]],[5,"fill_via_u32_chunks","","Implement <code>fill_bytes</code> by reading chunks from the output …",null,[[]]],[5,"fill_via_u64_chunks","","Implement <code>fill_bytes</code> by reading chunks from the output …",null,[[]]],[5,"next_u32_via_fill","","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.",null,[[]]],[5,"next_u64_via_fill","","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.",null,[[]]],[0,"le","rand_core","Little-Endian utilities",null,null],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>. …",null,[[]]],[5,"read_u64_into","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>. …",null,[[]]],[3,"Error","rand_core","Error type of random number generators",null,null],[3,"OsRng","","A random number generator that retrieves randomness from …",null,null],[8,"RngCore","","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random <code>u32</code>.",3,[[]]],[10,"next_u64","","Return the next random <code>u64</code>.",3,[[]]],[10,"fill_bytes","","Fill <code>dest</code> with random data.",3,[[]]],[10,"try_fill_bytes","","Fill <code>dest</code> entirely with random data.",3,[[],[["result",4],["error",3]]]],[8,"CryptoRng","","A marker trait used to indicate that an [<code>RngCore</code>] or …",null,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types …",4,null],[10,"from_seed","","Create a new PRNG using the given seed.",4,[[]]],[11,"seed_from_u64","","Create a new PRNG using a <code>u64</code> seed.",4,[[]]],[11,"from_rng","","Create a new PRNG seeded from another <code>Rng</code>.",4,[[["rngcore",8]],[["result",4],["error",3]]]],[11,"from_entropy","","Creates a new instance of the RNG seeded via <code>getrandom</code>.",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","rand_core::block","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","rand_core","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"next_u32","rand_core::block","",1,[[]]],[11,"next_u64","","",1,[[]]],[11,"fill_bytes","","",1,[[]]],[11,"try_fill_bytes","","",1,[[],[["result",4],["error",3]]]],[11,"next_u32","","",2,[[]]],[11,"next_u64","","",2,[[]]],[11,"fill_bytes","","",2,[[]]],[11,"try_fill_bytes","","",2,[[],[["result",4],["error",3]]]],[11,"next_u32","rand_core","",6,[[]]],[11,"next_u64","","",6,[[]]],[11,"fill_bytes","","",6,[[]]],[11,"try_fill_bytes","","",6,[[],[["result",4],["error",3]]]],[11,"from_seed","rand_core::block","",1,[[]]],[11,"seed_from_u64","","",1,[[]]],[11,"from_rng","","",1,[[["rngcore",8]],[["result",4],["error",3]]]],[11,"from_seed","","",2,[[]]],[11,"seed_from_u64","","",2,[[]]],[11,"from_rng","","",2,[[["rngcore",8]],[["result",4],["error",3]]]],[11,"from","rand_core","",5,[[["nonzerou32",3]]]],[11,"from","","",5,[[["error",3]]]],[11,"clone","rand_core::block","",1,[[],["blockrng",3]]],[11,"clone","","",2,[[],["blockrng64",3]]],[11,"clone","rand_core","",6,[[],["osrng",3]]],[11,"default","","",6,[[],["osrng",3]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","rand_core::block","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","rand_core","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"source","","",5,[[],[["error",8],["option",4]]]],[11,"read","","",3,[[],[["result",4],["error",3]]]],[11,"new","","Construct from any type supporting <code>std::error::Error</code>",5,[[]]],[11,"inner","","Reference the inner error (<code>std</code> only)",5,[[],["error",8]]],[11,"take_inner","","Unwrap the inner error (<code>std</code> only)",5,[[],[["box",3],["error",8]]]],[18,"INTERNAL_START","","Codes below this point represent OS Errors (i.e. positive …",5,null],[18,"CUSTOM_START","","Codes at or above this point can be used by users to …",5,null],[11,"raw_os_error","","Extract the raw OS error code (if this error came from …",5,[[],["option",4]]],[11,"code","","Retrieve the error code, if any.",5,[[],[["option",4],["nonzerou32",3]]]]],"p":[[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"],[8,"RngCore"],[8,"SeedableRng"],[3,"Error"],[3,"OsRng"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);