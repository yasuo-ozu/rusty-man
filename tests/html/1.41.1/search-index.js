var searchIndex={};
searchIndex["anyhow"] = {"doc":"![github] ![crates-io] ![docs-rs]","i":[[3,"Error","anyhow","The `Error` type, a wrapper around a dynamic error type.",null,null],[3,"Chain","","Iterator of a chain of source errors.",null,null],[11,"new","","",0,[[["stderror"]],["self"]]],[11,"new","","Create a new error object from any error type.",1,[[["e"]],["self"]]],[11,"msg","","Create a new error object from a printable error message.",1,[[["m"]],["self"]]],[11,"context","","Wrap the error value with additional context.",1,[[["c"]],["self"]]],[11,"chain","","An iterator of the chain of source errors contained by…",1,[[["self"]],["chain"]]],[11,"root_cause","","The lowest level cause of this error — this error's…",1,[[["self"]],["stderror"]]],[11,"is","","Returns true if `E` is the type held by this error object.",1,[[["self"]],["bool"]]],[11,"downcast","","Attempt to downcast the error object to a concrete type.",1,[[],["result"]]],[11,"downcast_ref","","Downcast this error object by reference.",1,[[["self"]],[["option"],["e"]]]],[11,"downcast_mut","","Downcast this error object by mutable reference.",1,[[["self"]],[["option"],["e"]]]],[6,"Result","","`Result<T, Error>`",null,null],[8,"Context","","Provides the `context` method for `Result`.",null,null],[10,"context","","Wrap the error value with additional context.",2,[[["c"]],[["error"],["result",["error"]]]]],[10,"with_context","","Wrap the error value with additional context that is…",2,[[["f"]],[["error"],["result",["error"]]]]],[14,"bail","","Return early with an error.",null,null],[14,"ensure","","Return early with an error if a condition is not satisfied.",null,null],[14,"anyhow","","Construct an ad-hoc error from a string.",null,null],[11,"from","","",1,[[["t"]],["t"]]],[11,"from","","",1,[[],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"drop","","",1,[[["self"]]]],[11,"as_ref","","",1,[[["self"]],["stderror"]]],[11,"as_ref","","",1,[[["self"]],["stderror"]]],[11,"from","","",1,[[["e"]],["self"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"len","","",0,[[["self"]],["usize"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,[[["self"]]]],[11,"clone","","",0,[[["self"]],["chain"]]],[11,"default","","",0,[[],["self"]]],[11,"deref","","",1,[[["self"]]]],[11,"deref_mut","","",1,[[["self"]]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]]],"p":[[3,"Chain"],[3,"Error"],[8,"Context"]]};
searchIndex["kuchiki"] = {"doc":"Kuchiki (朽木), a HTML/XML tree manipulation library for Rust.","i":[[3,"Attribute","kuchiki","The non-identifying parts of an attribute",null,null],[12,"prefix","","The namespace prefix, if any",0,null],[12,"value","","The attribute value",0,null],[3,"Attributes","","Convenience wrapper around a btreemap that adds method for…",null,null],[12,"map","","A map of attributes whose name can have namespaces.",1,null],[3,"ExpandedName","","https://www.w3.org/TR/REC-xml-names/#dt-expname",null,null],[12,"ns","","Namespace URL",2,null],[12,"local","","\"Local\" part of the name",2,null],[3,"NodeDataRef","","Holds a strong reference to a node, but dereferences to…",null,null],[3,"ParseOpts","","Options for the HTML parser.",null,null],[12,"tokenizer","","Options for the HTML tokenizer.",3,null],[12,"tree_builder","","Options for the HTML tree builder.",3,null],[12,"on_parse_error","","A callback for HTML parse errors (which are never fatal).",3,null],[3,"Selector","","A pre-compiled CSS Selector.",null,null],[3,"Selectors","","A pre-compiled list of CSS Selectors.",null,null],[12,"0","","",4,null],[3,"Specificity","","The specificity of a selector.",null,null],[3,"Doctype","","Data specific to doctype nodes.",null,null],[12,"name","","The name of the doctype",5,null],[12,"public_id","","The public ID of the doctype",5,null],[12,"system_id","","The system ID of the doctype",5,null],[3,"DocumentData","","Data specific to document nodes.",null,null],[3,"ElementData","","Data specific to element nodes.",null,null],[12,"name","","The namespace and local name of the element, such as…",6,null],[12,"attributes","","The attributes of the elements.",6,null],[12,"template_contents","","If the element is an HTML `<template>` element, the…",6,null],[3,"Node","","A node inside a DOM-like tree.",null,null],[3,"NodeRef","","A strong reference to a node.",null,null],[12,"0","","",7,null],[4,"NodeData","","Node data specific to the node type.",null,null],[13,"Element","","Element node",8,null],[13,"Text","","Text node",8,null],[13,"Comment","","Comment node",8,null],[13,"ProcessingInstruction","","Processing instruction node",8,null],[13,"Doctype","","Doctype node",8,null],[13,"Document","","Document node",8,null],[13,"DocumentFragment","","Document fragment node",8,null],[5,"parse_html","","Parse an HTML document with html5ever and the default…",null,[[],[["parser",["sink"]],["sink"]]]],[5,"parse_html_with_options","","Parse an HTML document with html5ever with custom…",null,[[["parseopts"]],[["parser",["sink"]],["sink"]]]],[11,"new","","Trivial constructor",2,[[["localname"],["into",["namespace"]],["namespace"],["into",["localname"]]],["self"]]],[11,"contains","","Like BTreeMap::contains",1,[[["localname"],["self"],["into",["localname"]]],["bool"]]],[11,"get","","Like BTreeMap::get",1,[[["localname"],["self"],["into",["localname"]]],[["option",["str"]],["str"]]]],[11,"get_mut","","Like BTreeMap::get_mut",1,[[["localname"],["self"],["into",["localname"]]],[["string"],["option",["string"]]]]],[11,"entry","","Like BTreeMap::entry",1,[[["localname"],["self"],["into",["localname"]]],[["attribute"],["expandedname"],["entry",["expandedname","attribute"]]]]],[11,"insert","","Like BTreeMap::insert",1,[[["into",["localname"]],["string"],["self"],["localname"]],[["option",["attribute"]],["attribute"]]]],[11,"remove","","Like BTreeMap::remove",1,[[["localname"],["self"],["into",["localname"]]],[["option",["attribute"]],["attribute"]]]],[0,"iter","","Node iterators",null,null],[3,"Siblings","kuchiki::iter","A double-ended iterator of sibling nodes.",null,null],[3,"Ancestors","","An iterator on ancestor nodes.",null,null],[3,"Descendants","","An iterator of references to a given node and its…",null,null],[3,"Traverse","","An iterator of the start and end edges of the nodes in a…",null,null],[3,"Elements","","A node iterator adaptor that yields element nodes.",null,null],[12,"0","","",9,null],[3,"Comments","","A node iterator adaptor that yields comment nodes.",null,null],[12,"0","","",10,null],[3,"TextNodes","","A node iterator adaptor that yields text nodes.",null,null],[12,"0","","",11,null],[3,"Select","","An element iterator adaptor that yields elements maching…",null,null],[12,"iter","","The underlying iterator.",12,null],[12,"selectors","","The selectors to be matched.",12,null],[4,"NodeEdge","","Marks either the start or the end of a node.",null,null],[13,"Start","","Indicates that start of a node that has children. Yielded…",13,null],[13,"End","","Indicates that end of a node that has children. Yielded by…",13,null],[8,"NodeIterator","","Convenience methods for node iterators.",null,null],[11,"elements","","Filter this element iterator to elements.",14,[[],["elements"]]],[11,"text_nodes","","Filter this node iterator to text nodes.",14,[[],["textnodes"]]],[11,"comments","","Filter this node iterator to comment nodes.",14,[[],["comments"]]],[11,"select","","Filter this node iterator to elements maching the given…",14,[[["str"]],[["result",["select"]],["select",["elements"]]]]],[8,"ElementIterator","","Convenience methods for element iterators.",null,null],[11,"select","","Filter this element iterator to elements maching the given…",15,[[["str"]],[["result",["select"]],["select"]]]],[11,"inclusive_ancestors","kuchiki","Return an iterator of references to this node and its…",7,[[["self"]],["ancestors"]]],[11,"ancestors","","Return an iterator of references to this node’s ancestors.",7,[[["self"]],["ancestors"]]],[11,"inclusive_preceding_siblings","","Return an iterator of references to this node and the…",7,[[["self"]],[["siblings"],["rev",["siblings"]]]]],[11,"preceding_siblings","","Return an iterator of references to this node’s siblings…",7,[[["self"]],[["siblings"],["rev",["siblings"]]]]],[11,"inclusive_following_siblings","","Return an iterator of references to this node and the…",7,[[["self"]],["siblings"]]],[11,"following_siblings","","Return an iterator of references to this node’s siblings…",7,[[["self"]],["siblings"]]],[11,"children","","Return an iterator of references to this node’s children.",7,[[["self"]],["siblings"]]],[11,"inclusive_descendants","","Return an iterator of references to this node and its…",7,[[["self"]],["descendants"]]],[11,"descendants","","Return an iterator of references to this node’s…",7,[[["self"]],["descendants"]]],[11,"traverse_inclusive","","Return an iterator of the start and end edges of this node…",7,[[["self"]],["traverse"]]],[11,"traverse","","Return an iterator of the start and end edges of this…",7,[[["self"]],["traverse"]]],[11,"select","","Return an iterator of the inclusive descendants element…",7,[[["str"],["self"]],[["select",["elements"]],["result",["select"]]]]],[11,"select_first","","Return the first inclusive descendants element that match…",7,[[["str"],["self"]],[["nodedataref",["elementdata"]],["result",["nodedataref"]]]]],[11,"into_element_ref","","If this node is an element, return a strong reference to…",7,[[],[["nodedataref",["elementdata"]],["option",["nodedataref"]]]]],[11,"into_text_ref","","If this node is a text node, return a strong reference to…",7,[[],[["option",["nodedataref"]],["nodedataref",["refcell"]]]]],[11,"into_comment_ref","","If this node is a comment, return a strong reference to…",7,[[],[["option",["nodedataref"]],["nodedataref",["refcell"]]]]],[11,"into_doctype_ref","","If this node is a doctype, return a strong reference to…",7,[[],[["nodedataref",["doctype"]],["option",["nodedataref"]]]]],[11,"into_document_ref","","If this node is a document, return a strong reference to…",7,[[],[["nodedataref",["documentdata"]],["option",["nodedataref"]]]]],[11,"new","","Create a `NodeDataRef` for a component in a given node.",16,[[["noderef"],["f"]],["nodedataref"]]],[11,"new_opt","","Create a `NodeDataRef` for and a component that may or may…",16,[[["noderef"],["f"]],[["nodedataref"],["option",["nodedataref"]]]]],[11,"as_node","","Access the corresponding node.",16,[[["self"]],["noderef"]]],[11,"text_contents","","Return the concatenation of all text nodes in this subtree.",16,[[["self"]],["string"]]],[11,"compile","","Compile a list of selectors. This may fail on syntax…",4,[[["str"]],[["result",["selectors"]],["selectors"]]]],[11,"matches","","Returns whether the given element matches this list of…",4,[[["self"],["nodedataref"]],["bool"]]],[11,"filter","","Filter an element iterator, yielding those matching this…",4,[[["i"],["self"]],[["select",["selectors"]],["selectors"]]]],[11,"matches","","Returns whether the given element matches this selector.",17,[[["self"],["nodedataref"]],["bool"]]],[11,"specificity","","Return the specificity of this selector.",17,[[["self"]],["specificity"]]],[11,"serialize","","Serialize this node and its descendants in HTML syntax to…",7,[[["w"],["self"]],["result"]]],[11,"serialize_to_file","","Serialize this node and its descendants in HTML syntax to…",7,[[["path"],["self"],["asref",["path"]]],["result"]]],[11,"quirks_mode","","The quirks mode of the document, as determined by the HTML…",18,[[["self"]],["quirksmode"]]],[11,"new","","Create a new node.",7,[[["nodedata"]],["noderef"]]],[11,"new_element","","Create a new element node.",7,[[["i"],["qualname"]],["noderef"]]],[11,"new_text","","Create a new text node.",7,[[["into",["string"]],["string"]],["noderef"]]],[11,"new_comment","","Create a new comment node.",7,[[["into",["string"]],["string"]],["noderef"]]],[11,"new_processing_instruction","","Create a new processing instruction node.",7,[[["t2"],["t1"]],["noderef"]]],[11,"new_doctype","","Create a new doctype node.",7,[[["t2"],["t1"],["t3"]],["noderef"]]],[11,"new_document","","Create a new document node.",7,[[],["noderef"]]],[11,"text_contents","","Return the concatenation of all text nodes in this subtree.",7,[[["self"]],["string"]]],[11,"data","","Return a reference to this node’s node-type-specific data.",19,[[["self"]],["nodedata"]]],[11,"as_element","","If this node is an element, return a reference to…",19,[[["self"]],[["elementdata"],["option",["elementdata"]]]]],[11,"as_text","","If this node is a text node, return a reference to its…",19,[[["self"]],[["option",["refcell"]],["refcell"]]]],[11,"as_comment","","If this node is a comment, return a reference to its…",19,[[["self"]],[["option",["refcell"]],["refcell"]]]],[11,"as_doctype","","If this node is a document, return a reference to…",19,[[["self"]],[["doctype"],["option",["doctype"]]]]],[11,"as_document","","If this node is a document, return a reference to…",19,[[["self"]],[["documentdata"],["option",["documentdata"]]]]],[11,"parent","","Return a reference to the parent node, unless this node is…",19,[[["self"]],[["option",["noderef"]],["noderef"]]]],[11,"first_child","","Return a reference to the first child of this node, unless…",19,[[["self"]],[["option",["noderef"]],["noderef"]]]],[11,"last_child","","Return a reference to the last child of this node, unless…",19,[[["self"]],[["option",["noderef"]],["noderef"]]]],[11,"previous_sibling","","Return a reference to the previous sibling of this node,…",19,[[["self"]],[["option",["noderef"]],["noderef"]]]],[11,"next_sibling","","Return a reference to the previous sibling of this node,…",19,[[["self"]],[["option",["noderef"]],["noderef"]]]],[11,"detach","","Detach a node from its parent and siblings. Children are…",19,[[["self"]]]],[11,"append","","Append a new child to this node, after existing children.",7,[[["noderef"],["self"]]]],[11,"prepend","","Prepend a new child to this node, before existing children.",7,[[["noderef"],["self"]]]],[11,"insert_after","","Insert a new sibling after this node.",7,[[["noderef"],["self"]]]],[11,"insert_before","","Insert a new sibling before this node.",7,[[["noderef"],["self"]]]],[0,"traits","","This module re-exports a number of traits that are useful…",null,null],[8,"TendrilSink","kuchiki::traits","Trait for types that can process a tendril.",null,null],[10,"process","","Process this tendril.",20,[[["self"],["tendril"]]]],[10,"error","","Indicates that an error has occurred.",20,[[["str"],["self"],["cow",["str"]]]]],[16,"Output","","What the overall result of processing is.",20,null],[10,"finish","","Indicates the end of the stream.",20,[[]]],[11,"one","","Process one tendril and finish.",20,[[["t"]]]],[11,"from_iter","","Consume an iterator of tendrils, processing each item,…",20,[[["i"]]]],[11,"read_from","","Read from the given stream of bytes until exhaustion and…",20,[[["r"]],[["result",["error"]],["error"]]]],[11,"from_file","","Read from the file at the given path and process…",20,[[["p"]],[["result",["error"]],["error"]]]],[11,"from","kuchiki","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","kuchiki::iter","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"into_iter","","",22,[[],["i"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"into_iter","","",23,[[],["i"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"into_iter","","",24,[[],["i"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"into_iter","","",25,[[],["i"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"into_iter","","",9,[[],["i"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"into_iter","","",11,[[],["i"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"into_iter","","",12,[[],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"drop","kuchiki","",19,[[["self"]]]],[11,"next_back","kuchiki::iter","",22,[[["self"]],[["option",["noderef"]],["noderef"]]]],[11,"next_back","","",24,[[["self"]],[["option",["noderef"]],["noderef"]]]],[11,"next_back","","",25,[[["self"]],[["nodeedge",["noderef"]],["option",["nodeedge"]]]]],[11,"next_back","","",9,[[["self"]],[["nodedataref",["elementdata"]],["option",["nodedataref"]]]]],[11,"next_back","","",10,[[["self"]],[["option",["nodedataref"]],["nodedataref",["refcell"]]]]],[11,"next_back","","",11,[[["self"]],[["option",["nodedataref"]],["nodedataref",["refcell"]]]]],[11,"next_back","","",12,[[["self"]],[["nodedataref",["elementdata"]],["option",["nodedataref"]]]]],[11,"next","","",22,[[["self"]],[["option",["noderef"]],["noderef"]]]],[11,"next","","",23,[[["self"]],[["option",["noderef"]],["noderef"]]]],[11,"next","","",24,[[["self"]],[["option",["noderef"]],["noderef"]]]],[11,"next","","",25,[[["self"]],[["nodeedge",["noderef"]],["option",["nodeedge"]]]]],[11,"next","","",9,[[["self"]],[["nodedataref",["elementdata"]],["option",["nodedataref"]]]]],[11,"next","","",10,[[["self"]],[["option",["nodedataref"]],["nodedataref",["refcell"]]]]],[11,"next","","",11,[[["self"]],[["option",["nodedataref"]],["nodedataref",["refcell"]]]]],[11,"next","","",12,[[["self"]],[["nodedataref",["elementdata"]],["option",["nodedataref"]]]]],[11,"clone","kuchiki","",1,[[["self"]],["attributes"]]],[11,"clone","","",2,[[["self"]],["expandedname"]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"clone","kuchiki::iter","",22,[[["self"]],["siblings"]]],[11,"clone","","",23,[[["self"]],["ancestors"]]],[11,"clone","","",24,[[["self"]],["descendants"]]],[11,"clone","","",13,[[["self"]],["nodeedge"]]],[11,"clone","","",25,[[["self"]],["traverse"]]],[11,"clone","","",9,[[["self"]],["elements"]]],[11,"clone","","",10,[[["self"]],["comments"]]],[11,"clone","","",11,[[["self"]],["textnodes"]]],[11,"clone","kuchiki","",16,[[["self"]],["self"]]],[11,"clone","","",21,[[["self"]],["specificity"]]],[11,"clone","","",8,[[["self"]],["nodedata"]]],[11,"clone","","",5,[[["self"]],["doctype"]]],[11,"clone","","",6,[[["self"]],["elementdata"]]],[11,"clone","","",18,[[["self"]],["documentdata"]]],[11,"clone","","",7,[[["self"]],["noderef"]]],[11,"default","","",3,[[],["parseopts"]]],[11,"cmp","","",2,[[["self"],["expandedname"]],["ordering"]]],[11,"cmp","","",21,[[["self"],["specificity"]],["ordering"]]],[11,"eq","","",1,[[["self"],["attributes"]],["bool"]]],[11,"ne","","",1,[[["self"],["attributes"]],["bool"]]],[11,"eq","","",2,[[["self"],["expandedname"]],["bool"]]],[11,"ne","","",2,[[["self"],["expandedname"]],["bool"]]],[11,"eq","","",0,[[["self"],["attribute"]],["bool"]]],[11,"ne","","",0,[[["self"],["attribute"]],["bool"]]],[11,"eq","kuchiki::iter","",13,[[["self"],["nodeedge"]],["bool"]]],[11,"ne","","",13,[[["self"],["nodeedge"]],["bool"]]],[11,"eq","kuchiki","",16,[[["self"]],["bool"]]],[11,"eq","","",21,[[["self"],["specificity"]],["bool"]]],[11,"ne","","",21,[[["self"],["specificity"]],["bool"]]],[11,"eq","","",8,[[["nodedata"],["self"]],["bool"]]],[11,"ne","","",8,[[["nodedata"],["self"]],["bool"]]],[11,"eq","","",5,[[["doctype"],["self"]],["bool"]]],[11,"ne","","",5,[[["doctype"],["self"]],["bool"]]],[11,"eq","","",6,[[["elementdata"],["self"]],["bool"]]],[11,"ne","","",6,[[["elementdata"],["self"]],["bool"]]],[11,"eq","","",18,[[["documentdata"],["self"]],["bool"]]],[11,"ne","","",18,[[["documentdata"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["noderef"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["expandedname"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",2,[[["self"],["expandedname"]],["bool"]]],[11,"le","","",2,[[["self"],["expandedname"]],["bool"]]],[11,"gt","","",2,[[["self"],["expandedname"]],["bool"]]],[11,"ge","","",2,[[["self"],["expandedname"]],["bool"]]],[11,"partial_cmp","","",21,[[["self"],["specificity"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",21,[[["self"],["specificity"]],["bool"]]],[11,"le","","",21,[[["self"],["specificity"]],["bool"]]],[11,"gt","","",21,[[["self"],["specificity"]],["bool"]]],[11,"ge","","",21,[[["self"],["specificity"]],["bool"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"deref","","",16,[[["self"]],["t"]]],[11,"deref","","",7,[[["self"]],["node"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","kuchiki::iter","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","kuchiki","",16,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"from_str","","",4,[[["str"]],[["result",["selectors"]],["selectors"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",21,[[["self"],["__h"]]]],[11,"serialize","","",7,[[["s"],["self"],["traversalscope"]],["result"]]],[11,"opaque","","",16,[[["self"]],["opaqueelement"]]],[11,"is_html_slot_element","","",16,[[["self"]],["bool"]]],[11,"parent_node_is_shadow_root","","",16,[[["self"]],["bool"]]],[11,"containing_shadow_host","","",16,[[["self"]],["option"]]],[11,"parent_element","","",16,[[["self"]],["option"]]],[11,"prev_sibling_element","","",16,[[["self"]],["option"]]],[11,"next_sibling_element","","",16,[[["self"]],["option"]]],[11,"is_empty","","",16,[[["self"]],["bool"]]],[11,"is_root","","",16,[[["self"]],["bool"]]],[11,"is_html_element_in_html_document","","",16,[[["self"]],["bool"]]],[11,"has_local_name","","",16,[[["self"],["localname"]],["bool"]]],[11,"has_namespace","","",16,[[["namespace"],["self"]],["bool"]]],[11,"is_part","","",16,[[["self"],["localname"]],["bool"]]],[11,"exported_part","","",16,[[["self"],["localname"]],[["option",["localname"]],["localname"]]]],[11,"imported_part","","",16,[[["self"],["localname"]],[["option",["localname"]],["localname"]]]],[11,"is_pseudo_element","","",16,[[["self"]],["bool"]]],[11,"is_same_type","","",16,[[["self"]],["bool"]]],[11,"is_link","","",16,[[["self"]],["bool"]]],[11,"has_id","","",16,[[["casesensitivity"],["self"],["localname"]],["bool"]]],[11,"has_class","","",16,[[["casesensitivity"],["self"],["localname"]],["bool"]]],[11,"attr_matches","","",16,[[["attrselectoroperation"],["namespaceconstraint"],["self"],["localname"]],["bool"]]],[11,"match_pseudo_element","","",16,[[["matchingcontext"],["self"],["pseudoelement"]],["bool"]]],[11,"match_non_ts_pseudo_class","","",16,[[["pseudoclass"],["matchingcontext"],["f"],["self"]],["bool"]]]],"p":[[3,"Attribute"],[3,"Attributes"],[3,"ExpandedName"],[3,"ParseOpts"],[3,"Selectors"],[3,"Doctype"],[3,"ElementData"],[3,"NodeRef"],[4,"NodeData"],[3,"Elements"],[3,"Comments"],[3,"TextNodes"],[3,"Select"],[4,"NodeEdge"],[8,"NodeIterator"],[8,"ElementIterator"],[3,"NodeDataRef"],[3,"Selector"],[3,"DocumentData"],[3,"Node"],[8,"TendrilSink"],[3,"Specificity"],[3,"Siblings"],[3,"Ancestors"],[3,"Descendants"],[3,"Traverse"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","i":[[3,"Record","log","The \"payload\" of a log message.",null,null],[3,"RecordBuilder","","Builder for `Record`.",null,null],[3,"Metadata","","Metadata about a log message.",null,null],[3,"MetadataBuilder","","Builder for `Metadata`.",null,null],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has…",null,null],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't…",null,null],[4,"Level","","An enum representing the available verbosity levels of the…",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LevelFilter","","An enum representing the available verbosity level filters…",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"set_max_level","","Sets the global maximum log level.",null,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",null,[[],["levelfilter"]]],[5,"set_boxed_logger","","Sets the global logger to a `Box<Log>`.",null,[[["log"],["box",["log"]]],[["setloggererror"],["result",["setloggererror"]]]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",null,[[["log"]],[["setloggererror"],["result",["setloggererror"]]]]],[5,"set_logger_racy","","A thread-unsafe version of [`set_logger`].",null,[[["log"]],[["setloggererror"],["result",["setloggererror"]]]]],[5,"logger","","Returns a reference to the logger.",null,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",null,null],[8,"Log","","A trait encapsulating the operations required of a logger.",null,null],[10,"enabled","","Determines if a log message with the specified metadata…",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["record"],["self"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],[["level"],["option",["level"]]]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],[["str"],["option",["str"]]]]],[11,"module_path_static","","The module path of the message, if it is a `'static` string.",3,[[["self"]],[["option",["str"]],["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],[["str"],["option",["str"]]]]],[11,"file_static","","The module path of the message, if it is a `'static` string.",3,[[["self"]],[["option",["str"]],["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["arguments"],["self"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with…",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["str"],["option",["str"]]],["recordbuilder"]]],[11,"module_path_static","","Set `module_path` to a `'static` string",4,[[["self"],["option",["str"]],["str"]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["str"],["option",["str"]]],["recordbuilder"]]],[11,"file_static","","Set `file` to a `'static` string.",4,[[["self"],["option",["str"]],["str"]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["u32"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in…",null,null],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["level"]]],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]],[11,"cmp","","",0,[[["level"],["self"]],["ordering"]]],[11,"cmp","","",1,[[["levelfilter"],["self"]],["ordering"]]],[11,"cmp","","",5,[[["metadata"],["self"]],["ordering"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"eq","","",0,[[["level"],["self"]],["bool"]]],[11,"eq","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"eq","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"eq","","",1,[[["level"],["self"]],["bool"]]],[11,"eq","","",5,[[["metadata"],["self"]],["bool"]]],[11,"ne","","",5,[[["metadata"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"eq","","",8,[[["parselevelerror"],["self"]],["bool"]]],[11,"ne","","",8,[[["parselevelerror"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["level"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["level"],["self"]],["bool"]]],[11,"le","","",0,[[["level"],["self"]],["bool"]]],[11,"gt","","",0,[[["level"],["self"]],["bool"]]],[11,"ge","","",0,[[["level"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["levelfilter"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"le","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"gt","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"ge","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["levelfilter"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"le","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"gt","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"ge","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["level"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["level"],["self"]],["bool"]]],[11,"le","","",1,[[["level"],["self"]],["bool"]]],[11,"gt","","",1,[[["level"],["self"]],["bool"]]],[11,"ge","","",1,[[["level"],["self"]],["bool"]]],[11,"partial_cmp","","",5,[[["metadata"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",5,[[["metadata"],["self"]],["bool"]]],[11,"le","","",5,[[["metadata"],["self"]],["bool"]]],[11,"gt","","",5,[[["metadata"],["self"]],["bool"]]],[11,"ge","","",5,[[["metadata"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"from_str","","",0,[[["str"]],[["level"],["result",["level"]]]]],[11,"from_str","","",1,[[["str"]],[["levelfilter"],["result",["levelfilter"]]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]]],"p":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["rand_core"] = {"doc":"Random number generation traits","i":[[3,"Error","rand_core","Error type of random number generators",null,null],[3,"OsRng","","A random number generator that retrieves randomness from…",null,null],[11,"new","","Construct from any type supporting `std::error::Error`",0,[[["e"]],["self"]]],[11,"inner","","Reference the inner error (`std` only)",0,[[["self"]],["error"]]],[11,"take_inner","","Unwrap the inner error (`std` only)",0,[[],[["error"],["box",["error"]]]]],[18,"INTERNAL_START","","Codes below this point represent OS Errors (i.e. positive…",0,null],[18,"CUSTOM_START","","Codes at or above this point can be used by users to…",0,null],[11,"raw_os_error","","Extract the raw OS error code (if this error came from the…",0,[[["self"]],[["option",["i32"]],["i32"]]]],[11,"code","","Retrieve the error code, if any.",0,[[["self"]],[["option",["nonzerou32"]],["nonzerou32"]]]],[0,"block","","The `BlockRngCore` trait and implementation helpers",null,null],[3,"BlockRng","rand_core::block","A wrapper type implementing [`RngCore`] for some type…",null,null],[12,"core","","The core part of the RNG, implementing the `generate`…",1,null],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type…",null,null],[12,"core","","The core part of the RNG, implementing the `generate`…",2,null],[8,"BlockRngCore","","A trait for RNGs which do not generate random numbers…",null,null],[16,"Item","","Results element type, e.g. `u32`.",3,null],[16,"Results","","Results type. This is the 'block' an RNG implementing…",3,null],[10,"generate","","Generate a new block of results.",3,[[["self"]]]],[11,"new","","Create a new `BlockRng` from an existing RNG implementing…",1,[[["r"]],["blockrng"]]],[11,"index","","Get the index into the result buffer.",1,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a…",1,[[["self"]]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the…",1,[[["self"],["usize"]]]],[11,"new","","Create a new `BlockRng` from an existing RNG implementing…",2,[[["r"]],["blockrng64"]]],[11,"index","","Get the index into the result buffer.",2,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a…",2,[[["self"]]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the…",2,[[["self"],["usize"]]]],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",null,null],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",null,[[["r"]],["u64"]]],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`,…",null,[[["r"]]]],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output…",null,[[]]],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output…",null,[[]]],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",null,[[["r"]],["u32"]]],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",null,[[["r"]],["u64"]]],[0,"le","rand_core","Little-Endian utilities",null,null],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`.…",null,[[]]],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.…",null,[[]]],[8,"RngCore","rand_core","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random `u32`.",4,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",4,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",4,[[["self"]]]],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",4,[[["self"]],[["result",["error"]],["error"]]]],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or…",null,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types…",5,null],[10,"from_seed","","Create a new PRNG using the given seed.",5,[[],["self"]]],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",5,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",5,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"from_entropy","","Creates a new instance of the RNG seeded via [`getrandom`].",5,[[],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","rand_core::block","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"next_u32","","",1,[[["self"]],["u32"]]],[11,"next_u64","","",1,[[["self"]],["u64"]]],[11,"fill_bytes","","",1,[[["self"]]]],[11,"try_fill_bytes","","",1,[[["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","","",2,[[["self"]],["u32"]]],[11,"next_u64","","",2,[[["self"]],["u64"]]],[11,"fill_bytes","","",2,[[["self"]]]],[11,"try_fill_bytes","","",2,[[["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","rand_core","",6,[[["self"]],["u32"]]],[11,"next_u64","","",6,[[["self"]],["u64"]]],[11,"fill_bytes","","",6,[[["self"]]]],[11,"try_fill_bytes","","",6,[[["self"]],[["result",["error"]],["error"]]]],[11,"from_seed","rand_core::block","",1,[[],["self"]]],[11,"seed_from_u64","","",1,[[["u64"]],["self"]]],[11,"from_rng","","",1,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"from_seed","","",2,[[],["self"]]],[11,"seed_from_u64","","",2,[[["u64"]],["self"]]],[11,"from_rng","","",2,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"from","rand_core","",0,[[["nonzerou32"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"clone","rand_core::block","",1,[[["self"]],["blockrng"]]],[11,"clone","","",2,[[["self"]],["blockrng64"]]],[11,"clone","rand_core","",6,[[["self"]],["osrng"]]],[11,"default","","",6,[[],["osrng"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","rand_core::block","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","rand_core","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"source","","",0,[[["self"]],[["option",["error"]],["error"]]]],[11,"read","","",4,[[["self"]],[["result",["usize","error"]],["usize"],["error"]]]]],"p":[[3,"Error"],[3,"BlockRng"],[3,"BlockRng64"],[8,"BlockRngCore"],[8,"RngCore"],[8,"SeedableRng"],[3,"OsRng"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);