var searchIndex = JSON.parse('{\
"anyhow":{"doc":"github crates-io docs-rs","t":[3,8,3,6,14,11,11,14,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10],"n":["Chain","Context","Error","Result","anyhow","as_ref","as_ref","bail","borrow","borrow","borrow_mut","borrow_mut","chain","clone","clone_into","context","context","default","deref","deref_mut","downcast","downcast_mut","downcast_ref","drop","ensure","fmt","fmt","from","from","from","from","into","into","into_iter","is","len","msg","new","new","next","next_back","root_cause","size_hint","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_context"],"q":["anyhow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Iterator of a chain of source errors.","Provides the <code>context</code> method for <code>Result</code>.","The <code>Error</code> type, a wrapper around a dynamic error type.","<code>Result<T, Error></code>","Construct an ad-hoc error from a string.","","","Return early with an error.","","","","","An iterator of the chain of source errors contained by …","","","Wrap the error value with additional context.","Wrap the error value with additional context.","","","","Attempt to downcast the error object to a concrete type.","Downcast this error object by mutable reference.","Downcast this error object by reference.","","Return early with an error if a condition is not …","","","","","","","","","","Returns true if <code>E</code> is the type held by this error object.","","Create a new error object from a printable error message.","Create a new error object from any error type.","","","","The lowest level cause of this error — this error’s …","","","","","","","","","","Wrap the error value with additional context that is …"],"i":[0,0,0,0,0,1,1,0,1,2,1,2,1,2,2,3,1,2,1,1,1,1,1,1,0,1,1,1,1,1,2,1,2,2,1,2,1,1,2,2,2,1,2,2,1,1,2,1,2,1,2,3],"f":[null,null,null,null,null,[[],["stderror",8]],[[],["stderror",8]],null,[[]],[[]],[[]],[[]],[[],["chain",3]],[[],["chain",3]],[[]],[[],[["result",6],["error",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["option",4]],[[],["option",4]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[]],[[]],[[["stderror",8]]],[[],["option",4]],[[],["option",4]],[[],["stderror",8]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",6],["error",3]]]],"p":[[3,"Error"],[3,"Chain"],[8,"Context"]]},\
"kuchiki":{"doc":"Kuchiki (朽木), a HTML/XML tree manipulation library …","t":[12,12,3,3,13,3,13,13,3,13,13,3,3,3,4,3,3,3,13,3,3,3,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,5,5,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,3,8,3,13,4,8,3,3,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,10,10,11,11,11,10,11],"n":["0","0","Attribute","Attributes","Comment","Doctype","Doctype","Document","DocumentData","DocumentFragment","Element","ElementData","ExpandedName","Node","NodeData","NodeDataRef","NodeRef","ParseOpts","ProcessingInstruction","Selector","Selectors","Specificity","Text","ancestors","append","as_comment","as_doctype","as_document","as_element","as_node","as_text","attr_matches","attributes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","compile","containing_shadow_host","contains","data","default","deref","deref","descendants","detach","drop","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exported_part","filter","first_child","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","following_siblings","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get_mut","has_class","has_id","has_local_name","has_namespace","hash","hash","imported_part","inclusive_ancestors","inclusive_descendants","inclusive_following_siblings","inclusive_preceding_siblings","insert","insert_after","insert_before","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_comment_ref","into_doctype_ref","into_document_ref","into_element_ref","into_text_ref","is_empty","is_html_element_in_html_document","is_html_slot_element","is_link","is_part","is_pseudo_element","is_root","is_same_type","iter","last_child","local","map","match_non_ts_pseudo_class","match_pseudo_element","matches","matches","name","name","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new_comment","new_doctype","new_document","new_element","new_opt","new_processing_instruction","new_text","next_sibling","next_sibling_element","ns","on_parse_error","opaque","parent","parent_element","parent_node_is_shadow_root","parse_html","parse_html_with_options","partial_cmp","partial_cmp","preceding_siblings","prefix","prepend","prev_sibling_element","previous_sibling","public_id","quirks_mode","remove","select","select_first","serialize","serialize","serialize_to_file","specificity","system_id","template_contents","text_contents","text_contents","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","tokenizer","traits","traverse","traverse_inclusive","tree_builder","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","0","0","0","Ancestors","Comments","Descendants","ElementIterator","Elements","End","NodeEdge","NodeIterator","Select","Siblings","Start","TextNodes","Traverse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comments","elements","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","iter","ne","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","select","select","selectors","text_nodes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Output","TendrilSink","error","finish","from_file","from_iter","one","process","read_from"],"q":["kuchiki","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kuchiki::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kuchiki::traits","","","","","","","",""],"d":["","","The non-identifying parts of an attribute","Convenience wrapper around a btreemap that adds method …","Comment node","Data specific to doctype nodes.","Doctype node","Document node","Data specific to document nodes.","Document fragment node","Element node","Data specific to element nodes.","https://www.w3.org/TR/REC-xml-names/#dt-expname","A node inside a DOM-like tree.","Node data specific to the node type.","Holds a strong reference to a node, but dereferences to …","A strong reference to a node.","Options for the HTML parser.","Processing instruction node","A pre-compiled CSS Selector.","A pre-compiled list of CSS Selectors.","The specificity of a selector.","Text node","Return an iterator of references to this node’s …","Append a new child to this node, after existing children.","If this node is a comment, return a reference to its …","If this node is a document, return a reference to …","If this node is a document, return a reference to …","If this node is an element, return a reference to …","Access the corresponding node.","If this node is a text node, return a reference to its …","","The attributes of the elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator of references to this node’s …","","","","","","","","","","","","","","","","","","","","","","","Compile a list of selectors. This may fail on syntax …","","Like BTreeMap::contains","Return a reference to this node’s node-type-specific …","","","","Return an iterator of references to this node’s …","Detach a node from its parent and siblings. Children are …","","Like BTreeMap::entry","","","","","","","","","","","","Filter an element iterator, yielding those matching this …","Return a reference to the first child of this node, …","","","","","","","","","","","","","","","Return an iterator of references to this node’s …","","","","","","","","","","","","","","","","Like BTreeMap::get","Like BTreeMap::get_mut","","","","","","","","Return an iterator of references to this node and its …","Return an iterator of references to this node and its …","Return an iterator of references to this node and the …","Return an iterator of references to this node and the …","Like BTreeMap::insert","Insert a new sibling after this node.","Insert a new sibling before this node.","","","","","","","","","","","","","","","If this node is a comment, return a strong reference to …","If this node is a doctype, return a strong reference to …","If this node is a document, return a strong reference to …","If this node is an element, return a strong reference to …","If this node is a text node, return a strong reference to …","","","","","","","","","Node iterators","Return a reference to the last child of this node, unless …","“Local” part of the name","A map of attributes whose name can have namespaces.","","","Returns whether the given element matches this list of …","Returns whether the given element matches this selector.","The name of the doctype","The namespace and local name of the element, such as …","","","","","","","","","Trivial constructor","Create a <code>NodeDataRef</code> for a component in a given node.","Create a new node.","Create a new comment node.","Create a new doctype node.","Create a new document node.","Create a new element node.","Create a <code>NodeDataRef</code> for and a component that may or may …","Create a new processing instruction node.","Create a new text node.","Return a reference to the previous sibling of this node, …","","Namespace URL","A callback for HTML parse errors (which are never fatal).","","Return a reference to the parent node, unless this node …","","","Parse an HTML document with html5ever and the default …","Parse an HTML document with html5ever with custom …","","","Return an iterator of references to this node’s …","The namespace prefix, if any","Prepend a new child to this node, before existing …","","Return a reference to the previous sibling of this node, …","The public ID of the doctype","The quirks mode of the document, as determined by the …","Like BTreeMap::remove","Return an iterator of the inclusive descendants element …","Return the first inclusive descendants element that match …","","Serialize this node and its descendants in HTML syntax to …","Serialize this node and its descendants in HTML syntax to …","Return the specificity of this selector.","The system ID of the doctype","If the element is an HTML <code><template></code> element, the …","Return the concatenation of all text nodes in this …","Return the concatenation of all text nodes in this …","","","","","","","","","","","","","","Options for the HTML tokenizer.","This module re-exports a number of traits that are useful …","Return an iterator of the start and end edges of this …","Return an iterator of the start and end edges of this …","Options for the HTML tree builder.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The attribute value","","","","An iterator on ancestor nodes.","A node iterator adaptor that yields comment nodes.","An iterator of references to a given node and its …","Convenience methods for element iterators.","A node iterator adaptor that yields element nodes.","Indicates that end of a node that has children. Yielded …","Marks either the start or the end of a node.","Convenience methods for node iterators.","An element iterator adaptor that yields elements maching …","A double-ended iterator of sibling nodes.","Indicates that start of a node that has children. Yielded …","A node iterator adaptor that yields text nodes.","An iterator of the start and end edges of the nodes in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Filter this node iterator to comment nodes.","Filter this element iterator to elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The underlying iterator.","","","","","","","","","","","","","","","","","Filter this node iterator to elements maching the given …","Filter this element iterator to elements maching the …","The selectors to be matched.","Filter this node iterator to text nodes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","What the overall result of processing is.","Trait for types that can process a tendril.","Indicates that an error has occurred.","Indicates the end of the stream.","Read from the file at the given path and process …","Consume an iterator of tendrils, processing each item, …","Process one tendril and finish.","Process this tendril.","Read from the given stream of bytes until exhaustion and …"],"i":[1,2,0,0,3,0,3,3,0,3,3,0,0,0,0,0,0,0,3,0,0,0,3,2,2,4,4,4,4,5,4,5,6,1,7,4,8,9,10,5,11,12,3,13,6,14,2,1,7,4,8,9,10,5,11,12,3,13,6,14,2,2,8,9,10,5,12,3,13,6,14,2,8,9,10,5,12,3,13,6,14,2,9,12,1,5,8,4,11,5,2,2,4,4,8,8,9,10,5,12,3,13,6,14,2,5,1,4,1,1,7,7,4,8,9,10,5,3,13,6,14,2,2,1,7,4,8,9,10,5,11,12,3,13,6,14,2,1,8,8,5,5,5,5,9,12,5,2,2,2,2,8,2,2,1,7,4,8,9,10,5,11,12,3,13,6,14,2,2,2,2,2,2,5,5,5,5,5,5,5,5,0,4,9,8,5,5,1,7,13,6,8,9,10,12,3,13,6,14,9,5,2,2,2,2,2,5,2,2,4,5,9,11,5,4,5,5,0,0,9,12,2,10,2,5,4,13,14,8,2,2,2,2,2,7,13,6,5,2,8,9,10,5,12,3,13,6,14,2,1,7,2,11,0,2,2,11,1,7,4,8,9,10,5,11,12,3,13,6,14,2,1,7,4,8,9,10,5,11,12,3,13,6,14,2,1,7,4,8,9,10,5,11,12,3,13,6,14,2,10,15,16,17,0,0,0,0,0,18,0,0,0,0,18,0,0,19,20,21,22,18,23,15,16,17,19,20,21,22,18,23,15,16,17,20,21,22,18,23,15,16,17,20,21,22,18,23,15,16,17,24,24,18,20,21,22,18,23,15,16,17,19,20,21,22,18,23,15,16,17,19,20,21,22,18,23,15,16,17,19,20,21,22,23,15,16,17,19,18,19,20,21,22,23,15,16,17,19,20,22,23,15,16,17,24,25,19,24,20,21,22,18,23,15,16,17,19,20,21,22,18,23,15,16,17,19,20,21,22,18,23,15,16,17,19,20,21,22,18,23,15,16,17,26,0,26,26,26,26,26,26,26],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["ancestors",3]],[[["noderef",3]]],[[],[["option",4],["refcell",3]]],[[],[["doctype",3],["option",4]]],[[],[["option",4],["documentdata",3]]],[[],[["option",4],["elementdata",3]]],[[],["noderef",3]],[[],[["option",4],["refcell",3]]],[[["localname",6],["attrselectoroperation",4],["namespaceconstraint",4]],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["siblings",3]],[[],["attributes",3]],[[],["expandedname",3]],[[],["attribute",3]],[[]],[[],["specificity",3]],[[],["nodedata",4]],[[],["doctype",3]],[[],["elementdata",3]],[[],["documentdata",3]],[[],["noderef",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["expandedname",3]],["ordering",4]],[[["specificity",3]],["ordering",4]],[[["str",15]],[["result",4],["selectors",3]]],[[],["option",4]],[[["into",8],["localname",6]],["bool",15]],[[],["nodedata",4]],[[],["parseopts",3]],[[]],[[],["node",3]],[[],["descendants",3]],[[]],[[]],[[["into",8],["localname",6]],[["expandedname",3],["entry",4],["attribute",3]]],[[["attributes",3]],["bool",15]],[[["expandedname",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[],["bool",15]],[[["specificity",3]],["bool",15]],[[["nodedata",4]],["bool",15]],[[["doctype",3]],["bool",15]],[[["elementdata",3]],["bool",15]],[[["documentdata",3]],["bool",15]],[[["noderef",3]],["bool",15]],[[["localname",6]],[["localname",6],["option",4]]],[[],[["select",3],["selectors",3]]],[[],[["noderef",3],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["siblings",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["result",4],["selectors",3]]],[[["into",8],["localname",6]],[["option",4],["str",15]]],[[["into",8],["localname",6]],[["string",3],["option",4]]],[[["localname",6],["casesensitivity",4]],["bool",15]],[[["localname",6],["casesensitivity",4]],["bool",15]],[[["localname",6]],["bool",15]],[[["namespace",6]],["bool",15]],[[]],[[]],[[["localname",6]],[["localname",6],["option",4]]],[[],["ancestors",3]],[[],["descendants",3]],[[],["siblings",3]],[[],[["rev",3],["siblings",3]]],[[["into",8],["localname",6],["string",3]],[["option",4],["attribute",3]]],[[["noderef",3]]],[[["noderef",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["nodedataref",3]]],[[],[["nodedataref",3],["option",4]]],[[],[["option",4],["nodedataref",3]]],[[],[["option",4],["nodedataref",3]]],[[],[["option",4],["nodedataref",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["localname",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],[["noderef",3],["option",4]]],null,null,[[["matchingcontext",3],["pseudoclass",4]],["bool",15]],[[["matchingcontext",3],["pseudoelement",4]],["bool",15]],[[["nodedataref",3]],["bool",15]],[[["nodedataref",3]],["bool",15]],null,null,[[["attributes",3]],["bool",15]],[[["expandedname",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[["specificity",3]],["bool",15]],[[["nodedata",4]],["bool",15]],[[["doctype",3]],["bool",15]],[[["elementdata",3]],["bool",15]],[[["documentdata",3]],["bool",15]],[[["into",8],["into",8],["localname",6],["namespace",6]]],[[["noderef",3]],["nodedataref",3]],[[["nodedata",4]],["noderef",3]],[[["into",8],["string",3]],["noderef",3]],[[],["noderef",3]],[[],["noderef",3]],[[["qualname",3]],["noderef",3]],[[["noderef",3]],[["option",4],["nodedataref",3]]],[[],["noderef",3]],[[["into",8],["string",3]],["noderef",3]],[[],[["noderef",3],["option",4]]],[[],["option",4]],null,null,[[],["opaqueelement",3]],[[],[["noderef",3],["option",4]]],[[],["option",4]],[[],["bool",15]],[[],[["sink",3],["parser",3]]],[[["parseopts",3]],[["sink",3],["parser",3]]],[[["expandedname",3]],[["option",4],["ordering",4]]],[[["specificity",3]],[["option",4],["ordering",4]]],[[],[["rev",3],["siblings",3]]],null,[[["noderef",3]]],[[],["option",4]],[[],[["noderef",3],["option",4]]],null,[[],["quirksmode",4]],[[["into",8],["localname",6]],[["option",4],["attribute",3]]],[[["str",15]],[["result",4],["select",3]]],[[["str",15]],[["result",4],["nodedataref",3]]],[[["traversalscope",4]],["result",6]],[[],["result",6]],[[["asref",8],["path",3]],["result",6]],[[],["specificity",3]],null,null,[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,null,[[],["traverse",3]],[[],["traverse",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["siblings",3]],[[],["ancestors",3]],[[],["descendants",3]],[[],["nodeedge",4]],[[],["traverse",3]],[[],["elements",3]],[[],["comments",3]],[[],["textnodes",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["comments",3]],[[],["elements",3]],[[["nodeedge",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["nodeedge",4]],["bool",15]],[[],[["option",4],["nodedataref",3]]],[[],[["noderef",3],["option",4]]],[[],[["noderef",3],["option",4]]],[[],[["noderef",3],["option",4]]],[[],[["option",4],["nodeedge",4]]],[[],[["option",4],["nodedataref",3]]],[[],[["option",4],["nodedataref",3]]],[[],[["option",4],["nodedataref",3]]],[[],[["option",4],["nodedataref",3]]],[[],[["noderef",3],["option",4]]],[[],[["noderef",3],["option",4]]],[[],[["option",4],["nodeedge",4]]],[[],[["option",4],["nodedataref",3]]],[[],[["option",4],["nodedataref",3]]],[[],[["option",4],["nodedataref",3]]],[[["str",15]],[["select",3],["result",4]]],[[["str",15]],[["result",4],["select",3]]],null,[[],["textnodes",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["cow",4],["str",15]]],[[]],[[],[["result",4],["error",3]]],[[]],[[]],[[["tendril",3]]],[[],[["result",4],["error",3]]]],"p":[[3,"Selectors"],[3,"NodeRef"],[4,"NodeData"],[3,"Node"],[3,"NodeDataRef"],[3,"ElementData"],[3,"Selector"],[3,"Attributes"],[3,"ExpandedName"],[3,"Attribute"],[3,"ParseOpts"],[3,"Specificity"],[3,"Doctype"],[3,"DocumentData"],[3,"Elements"],[3,"Comments"],[3,"TextNodes"],[4,"NodeEdge"],[3,"Select"],[3,"Siblings"],[3,"Ancestors"],[3,"Descendants"],[3,"Traverse"],[8,"NodeIterator"],[8,"ElementIterator"],[8,"TendrilSink"]]},\
"log":{"doc":"A lightweight logging facade.","t":[13,13,13,13,13,13,4,4,8,3,3,13,3,3,3,17,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,14,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14],"n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","ne","ne","ne","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_boxed_logger","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["logd":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of …","An enum representing the available verbosity level …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>\'static</code> string.","Set <code>file</code> to a <code>\'static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the info level.","","","","","","","","","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>\'static</code> string.","Set <code>module_path</code> to a <code>\'static</code> string","","","","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>Box<Log></code>.","Sets the global logger to a <code>&\'static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","","","","","","","","","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[1,2,1,2,1,2,0,0,0,0,0,2,0,0,0,0,0,1,2,1,2,3,4,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,4,6,3,5,1,2,3,5,1,2,3,5,1,2,5,6,0,9,1,1,2,2,5,6,8,0,3,4,3,4,9,1,1,2,2,3,4,5,6,7,7,8,8,1,2,3,4,5,6,7,8,1,2,1,1,2,2,1,1,2,2,1,2,5,6,0,1,2,3,4,5,6,7,8,1,1,2,2,3,4,5,6,3,4,9,0,0,0,1,1,2,2,1,2,0,3,4,3,4,3,4,5,6,8,4,6,1,1,2,2,5,6,0,0,0,0,3,4,5,6,2,1,1,2,3,5,1,2,7,8,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["arguments",3]],[[["arguments",3]],["recordbuilder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["record",3]],[[],["metadata",3]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[],["level",4]],[[],["levelfilter",4]],[[],["record",3]],[[],["metadata",3]],[[]],[[]],[[]],[[]],[[["level",4]],["ordering",4]],[[["levelfilter",4]],["ordering",4]],[[["metadata",3]],["ordering",4]],[[["metadatabuilder",3]],["ordering",4]],null,[[["metadata",3]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["metadata",3]],["bool",15]],[[["metadatabuilder",3]],["bool",15]],[[["parselevelerror",3]],["bool",15]],null,[[],[["str",15],["option",4]]],[[["str",15],["option",4]],["recordbuilder",3]],[[],[["str",15],["option",4]]],[[["str",15],["option",4]],["recordbuilder",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["level",4],["result",4]]],[[["str",15]],[["levelfilter",4],["result",4]]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[],["level",4]],[[["level",4]],["recordbuilder",3]],[[],["level",4]],[[["level",4]],["metadatabuilder",3]],[[],[["u32",15],["option",4]]],[[["u32",15],["option",4]],["recordbuilder",3]],[[["record",3]]],null,null,[[],["log",8]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[],["level",4]],[[],["levelfilter",4]],[[],["levelfilter",4]],[[],["metadata",3]],[[["metadata",3]],["recordbuilder",3]],[[],[["str",15],["option",4]]],[[["str",15],["option",4]],["recordbuilder",3]],[[],[["str",15],["option",4]]],[[["str",15],["option",4]],["recordbuilder",3]],[[["metadata",3]],["bool",15]],[[["metadatabuilder",3]],["bool",15]],[[["parselevelerror",3]],["bool",15]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[["levelfilter",4]],[["ordering",4],["option",4]]],[[["level",4]],[["ordering",4],["option",4]]],[[["levelfilter",4]],[["ordering",4],["option",4]]],[[["level",4]],[["ordering",4],["option",4]]],[[["metadata",3]],[["option",4],["ordering",4]]],[[["metadatabuilder",3]],[["option",4],["ordering",4]]],[[["log",8],["box",3]],[["result",4],["setloggererror",3]]],[[["log",8]],[["result",4],["setloggererror",3]]],[[["log",8]],[["result",4],["setloggererror",3]]],[[["levelfilter",4]]],[[],["str",15]],[[["str",15]],["recordbuilder",3]],[[],["str",15]],[[["str",15]],["metadatabuilder",3]],[[],[["level",4],["option",4]]],[[],["levelfilter",4]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[4,"Level"],[4,"LevelFilter"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"],[8,"Log"]]},\
"rand_core":{"doc":"Random number generation traits","t":[18,8,3,18,3,8,16,8,0,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,0,11,10,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,3,3,8,16,16,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5],"n":["CUSTOM_START","CryptoRng","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":["rand_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::impls","","","","","","rand_core::le",""],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an [<code>RngCore</code>] or …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","","","","","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","","","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing [<code>RngCore</code>] for some type …","A wrapper type implementing [<code>RngCore</code>] for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","","","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","","","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>. …","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>. …"],"i":[1,0,0,1,0,0,2,0,0,1,3,1,3,3,3,1,3,4,3,1,1,3,1,1,1,3,2,2,2,0,1,1,3,0,1,4,3,4,3,1,4,2,1,1,3,1,4,3,1,3,1,3,1,3,0,0,0,5,5,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,5,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["osrng",3]],[[]],[[],[["option",4],["nonzerou32",3]]],[[],["osrng",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",3]]],[[["nonzerou32",3]]],[[]],[[]],[[["rngcore",8]],[["error",3],["result",4]]],[[]],null,[[],["error",8]],[[]],[[]],null,[[]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],[["i32",15],["option",4]]],[[],[["usize",15],["result",4],["error",3]]],[[["u64",15]]],[[],[["error",8],["option",4]]],[[],[["box",3],["error",8]]],[[]],[[],["string",3]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["blockrng",3]],[[],["blockrng64",3]],[[]],[[]],null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["rngcore",8]],[["error",3],["result",4]]],[[["rngcore",8]],[["error",3],["result",4]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["blockrng",3]],[[],["blockrng64",3]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]]],"p":[[3,"Error"],[8,"SeedableRng"],[3,"OsRng"],[8,"RngCore"],[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};