var N=null,E="",T="t",U="u",searchIndex={};
var R=["levelfilter","setloggererror","result","metadata","level","option","The module path of the message, if it is a `'static` string.","recordbuilder","arguments","target","module_path","module_path_static","file_static","Returns a new builder.","The verbosity level of the message.","The name of the target of the directive.","metadatabuilder","try_from","try_into","borrow_mut","to_owned","clone_into","type_id","borrow","typeid","to_string","ordering","parselevelerror","partial_cmp","formatter","from_str","LevelFilter","RecordBuilder","Metadata","MetadataBuilder","SetLoggerError","ParseLevelError","stderror","Wrap the error value with additional context.","string","nonzerou32","A wrapper type implementing [`RngCore`] for some type…","The core part of the RNG, implementing the `generate`…","Create a new `BlockRng` from an existing RNG implementing…","Get the index into the result buffer.","Reset the number of available results. This will force a…","generate_and_set","Generate a new set of results immediately, setting the…","rand_core","Implement `fill_bytes` by reading chunks from the output…","rand_core::block","next_u32","next_u64","fill_bytes","try_fill_bytes","from_seed","seed_from_u64","from_rng","rngcore","blockrng","blockrng64","BlockRng","BlockRng64","BlockRngCore","SeedableRng","namespace","localname","expandedname","attribute","elements","comments","select","ancestors","siblings","Return an iterator of references to this node and the…","Return an iterator of references to this node’s siblings…","Return an iterator of references to this node and its…","descendants","traverse","nodedataref","elementdata","noderef","selectors","specificity","Serialize this node and its descendants in HTML syntax to…","text_contents","Return the concatenation of all text nodes in this subtree.","nodedata","refcell","doctype","If this node is a document, return a reference to…","documentdata","Return a reference to the previous sibling of this node,…","kuchiki","kuchiki::iter","into_iter","nodeedge","next_back","attributes","textnodes","parseopts","serialize","casesensitivity","matchingcontext","Attribute","Attributes","ExpandedName","ParseOpts","Selectors","ElementData","TextNodes","NodeIterator","ElementIterator","NodeDataRef","DocumentData","TendrilSink","Specificity","Ancestors","Descendants"];
searchIndex["anyhow"]={"doc":"![github] ![crates-io] ![docs-rs]","i":[[3,"Error","anyhow","The `Error` type, a wrapper around a dynamic error type.",N,N],[3,"Chain",E,"Iterator of a chain of source errors.",N,N],[11,"new",E,E,0,[[[R[37]]],["self"]]],[11,"new",E,"Create a new error object from any error type.",1,[[["e"]],["self"]]],[11,"msg",E,"Create a new error object from a printable error message.",1,[[["m"]],["self"]]],[11,"context",E,R[38],1,[[["c"]],["self"]]],[11,"chain",E,"An iterator of the chain of source errors contained by…",1,[[["self"]],["chain"]]],[11,"root_cause",E,"The lowest level cause of this error — this error's…",1,[[["self"]],[R[37]]]],[11,"is",E,"Returns true if `E` is the type held by this error object.",1,[[["self"]],["bool"]]],[11,"downcast",E,"Attempt to downcast the error object to a concrete type.",1,[[],[R[2]]]],[11,"downcast_ref",E,"Downcast this error object by reference.",1,[[["self"]],[[R[5]],["e"]]]],[11,"downcast_mut",E,"Downcast this error object by mutable reference.",1,[[["self"]],[["e"],[R[5]]]]],[6,"Result",E,"`Result<T, Error>`",N,N],[8,"Context",E,"Provides the `context` method for `Result`.",N,N],[10,"context",E,R[38],2,[[["c"]],[["error"],[R[2],["error"]]]]],[10,"with_context",E,"Wrap the error value with additional context that is…",2,[[["f"]],[["error"],[R[2],["error"]]]]],[14,"bail",E,"Return early with an error.",N,N],[14,"ensure",E,"Return early with an error if a condition is not satisfied.",N,N],[14,"anyhow",E,"Construct an ad-hoc error from a string.",N,N],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[],[T]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[25],E,E,1,[[["self"]],[R[39]]]],[11,R[17],E,E,1,[[[U]],[R[2]]]],[11,R[18],E,E,1,[[],[R[2]]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[95],E,E,0,[[],["i"]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[21],E,E,0,[[["self"],[T]]]],[11,R[17],E,E,0,[[[U]],[R[2]]]],[11,R[18],E,E,0,[[],[R[2]]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[24]]]],[11,"drop",E,E,1,[[["self"]]]],[11,"as_ref",E,E,1,[[["self"]],[R[37]]]],[11,"as_ref",E,E,1,[[["self"]],[R[37]]]],[11,"from",E,E,1,[[["e"]],["self"]]],[11,"next",E,E,0,[[["self"]],[R[5]]]],[11,"size_hint",E,E,0,[[["self"]]]],[11,R[97],E,E,0,[[["self"]],[R[5]]]],[11,"len",E,E,0,[[["self"]],["usize"]]],[11,"clone",E,E,0,[[["self"]],["chain"]]],[11,"default",E,E,0,[[],["self"]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[2]]]],[11,"deref",E,E,1,[[["self"]]]],[11,"deref_mut",E,E,1,[[["self"]]]]],"p":[[3,"Chain"],[3,"Error"],[8,"Context"]]};
searchIndex["kuchiki"]={"doc":"Kuchiki (朽木), a HTML/XML tree manipulation library for Rust.","i":[[3,R[104],R[93],"The non-identifying parts of an attribute",N,N],[12,"prefix",E,"The namespace prefix, if any",0,N],[12,"value",E,"The attribute value",0,N],[3,R[105],E,"Convenience wrapper around a btreemap that adds method for…",N,N],[12,"map",E,"A map of attributes whose name can have namespaces.",1,N],[3,R[106],E,"https://www.w3.org/TR/REC-xml-names/#dt-expname",N,N],[12,"ns",E,"Namespace URL",2,N],[12,"local",E,"\"Local\" part of the name",2,N],[3,R[113],E,"Holds a strong reference to a node, but dereferences to…",N,N],[3,R[107],E,"Options for the HTML parser.",N,N],[12,"tokenizer",E,"Options for the HTML tokenizer.",3,N],[12,"tree_builder",E,"Options for the HTML tree builder.",3,N],[12,"on_parse_error",E,"A callback for HTML parse errors (which are never fatal).",3,N],[3,"Selector",E,"A pre-compiled CSS Selector.",N,N],[3,R[108],E,"A pre-compiled list of CSS Selectors.",N,N],[12,"0",E,E,4,N],[3,R[116],E,"The specificity of a selector.",N,N],[3,"Doctype",E,"Data specific to doctype nodes.",N,N],[12,"name",E,"The name of the doctype",5,N],[12,"public_id",E,"The public ID of the doctype",5,N],[12,"system_id",E,"The system ID of the doctype",5,N],[3,R[114],E,"Data specific to document nodes.",N,N],[3,R[109],E,"Data specific to element nodes.",N,N],[12,"name",E,"The namespace and local name of the element, such as…",6,N],[12,R[98],E,"The attributes of the elements.",6,N],[12,"template_contents",E,"If the element is an HTML `<template>` element, the…",6,N],[3,"Node",E,"A node inside a DOM-like tree.",N,N],[3,"NodeRef",E,"A strong reference to a node.",N,N],[12,"0",E,E,7,N],[4,"NodeData",E,"Node data specific to the node type.",N,N],[13,"Element",E,"Element node",8,N],[13,"Text",E,"Text node",8,N],[13,"Comment",E,"Comment node",8,N],[13,"ProcessingInstruction",E,"Processing instruction node",8,N],[13,"Doctype",E,"Doctype node",8,N],[13,"Document",E,"Document node",8,N],[13,"DocumentFragment",E,"Document fragment node",8,N],[5,"parse_html",E,"Parse an HTML document with html5ever and the default…",N,[[],[["sink"],["parser",["sink"]]]]],[5,"parse_html_with_options",E,"Parse an HTML document with html5ever with custom…",N,[[[R[100]]],[["sink"],["parser",["sink"]]]]],[11,"new",E,"Trivial constructor",2,[[[R[65]],["into",[R[66]]],["into",[R[65]]],[R[66]]],["self"]]],[11,"contains",E,"Like BTreeMap::contains",1,[[["into",[R[66]]],[R[66]],["self"]],["bool"]]],[11,"get",E,"Like BTreeMap::get",1,[[["into",[R[66]]],[R[66]],["self"]],[[R[5],["str"]],["str"]]]],[11,"get_mut",E,"Like BTreeMap::get_mut",1,[[["into",[R[66]]],["self"],[R[66]]],[[R[39]],[R[5],[R[39]]]]]],[11,"entry",E,"Like BTreeMap::entry",1,[[["into",[R[66]]],["self"],[R[66]]],[[R[67]],[R[68]],["entry",[R[67],R[68]]]]]],[11,"insert",E,"Like BTreeMap::insert",1,[[["into",[R[66]]],[R[66]],[R[39]],["self"]],[[R[5],[R[68]]],[R[68]]]]],[11,"remove",E,"Like BTreeMap::remove",1,[[["into",[R[66]]],["self"],[R[66]]],[[R[5],[R[68]]],[R[68]]]]],[0,"iter",E,"Node iterators",N,N],[3,"Siblings",R[94],"A double-ended iterator of sibling nodes.",N,N],[3,R[117],E,"An iterator on ancestor nodes.",N,N],[3,R[118],E,"An iterator of references to a given node and its…",N,N],[3,"Traverse",E,"An iterator of the start and end edges of the nodes in a…",N,N],[3,"Elements",E,"A node iterator adaptor that yields element nodes.",N,N],[12,"0",E,E,9,N],[3,"Comments",E,"A node iterator adaptor that yields comment nodes.",N,N],[12,"0",E,E,10,N],[3,R[110],E,"A node iterator adaptor that yields text nodes.",N,N],[12,"0",E,E,11,N],[3,"Select",E,"An element iterator adaptor that yields elements maching…",N,N],[12,"iter",E,"The underlying iterator.",12,N],[12,R[82],E,"The selectors to be matched.",12,N],[4,"NodeEdge",E,"Marks either the start or the end of a node.",N,N],[13,"Start",E,"Indicates that start of a node that has children. Yielded…",13,N],[13,"End",E,"Indicates that end of a node that has children. Yielded by…",13,N],[8,R[111],E,"Convenience methods for node iterators.",N,N],[11,R[69],E,"Filter this element iterator to elements.",14,[[],[R[69]]]],[11,"text_nodes",E,"Filter this node iterator to text nodes.",14,[[],[R[99]]]],[11,R[70],E,"Filter this node iterator to comment nodes.",14,[[],[R[70]]]],[11,R[71],E,"Filter this node iterator to elements maching the given…",14,[[["str"]],[[R[2],[R[71]]],[R[71],[R[69]]]]]],[8,R[112],E,"Convenience methods for element iterators.",N,N],[11,R[71],E,"Filter this element iterator to elements maching the given…",15,[[["str"]],[[R[2],[R[71]]],[R[71]]]]],[11,"inclusive_ancestors",R[93],R[76],7,[[["self"]],[R[72]]]],[11,R[72],E,"Return an iterator of references to this node’s ancestors.",7,[[["self"]],[R[72]]]],[11,"inclusive_preceding_siblings",E,R[74],7,[[["self"]],[["rev",[R[73]]],[R[73]]]]],[11,"preceding_siblings",E,R[75],7,[[["self"]],[["rev",[R[73]]],[R[73]]]]],[11,"inclusive_following_siblings",E,R[74],7,[[["self"]],[R[73]]]],[11,"following_siblings",E,R[75],7,[[["self"]],[R[73]]]],[11,"children",E,"Return an iterator of references to this node’s children.",7,[[["self"]],[R[73]]]],[11,"inclusive_descendants",E,R[76],7,[[["self"]],[R[77]]]],[11,R[77],E,"Return an iterator of references to this node’s…",7,[[["self"]],[R[77]]]],[11,"traverse_inclusive",E,"Return an iterator of the start and end edges of this node…",7,[[["self"]],[R[78]]]],[11,R[78],E,"Return an iterator of the start and end edges of this…",7,[[["self"]],[R[78]]]],[11,R[71],E,"Return an iterator of the inclusive descendants element…",7,[[["str"],["self"]],[[R[71],[R[69]]],[R[2],[R[71]]]]]],[11,"select_first",E,"Return the first inclusive descendants element that match…",7,[[["str"],["self"]],[[R[79],[R[80]]],[R[2],[R[79]]]]]],[11,"into_element_ref",E,"If this node is an element, return a strong reference to…",7,[[],[[R[79],[R[80]]],[R[5],[R[79]]]]]],[11,"into_text_ref",E,"If this node is a text node, return a strong reference to…",7,[[],[[R[79],[R[88]]],[R[5],[R[79]]]]]],[11,"into_comment_ref",E,"If this node is a comment, return a strong reference to…",7,[[],[[R[79],[R[88]]],[R[5],[R[79]]]]]],[11,"into_doctype_ref",E,"If this node is a doctype, return a strong reference to…",7,[[],[[R[5],[R[79]]],[R[79],[R[89]]]]]],[11,"into_document_ref",E,"If this node is a document, return a strong reference to…",7,[[],[[R[5],[R[79]]],[R[79],[R[91]]]]]],[11,"new",E,"Create a `NodeDataRef` for a component in a given node.",16,[[[R[81]],["f"]],[R[79]]]],[11,"new_opt",E,"Create a `NodeDataRef` for and a component that may or may…",16,[[[R[81]],["f"]],[[R[5],[R[79]]],[R[79]]]]],[11,"as_node",E,"Access the corresponding node.",16,[[["self"]],[R[81]]]],[11,R[85],E,R[86],16,[[["self"]],[R[39]]]],[11,"compile",E,"Compile a list of selectors. This may fail on syntax…",4,[[["str"]],[[R[2],[R[82]]],[R[82]]]]],[11,"matches",E,"Returns whether the given element matches this list of…",4,[[["self"],[R[79]]],["bool"]]],[11,"filter",E,"Filter an element iterator, yielding those matching this…",4,[[["i"],["self"]],[[R[82]],[R[71],[R[82]]]]]],[11,"matches",E,"Returns whether the given element matches this selector.",17,[[["self"],[R[79]]],["bool"]]],[11,R[83],E,"Return the specificity of this selector.",17,[[["self"]],[R[83]]]],[11,R[101],E,R[84],7,[[["w"],["self"]],[R[2]]]],[11,"serialize_to_file",E,R[84],7,[[["asref",["path"]],["self"],["path"]],[R[2]]]],[11,"quirks_mode",E,"The quirks mode of the document, as determined by the HTML…",18,[[["self"]],["quirksmode"]]],[11,"new",E,"Create a new node.",7,[[[R[87]]],[R[81]]]],[11,"new_element",E,"Create a new element node.",7,[[["i"],["qualname"]],[R[81]]]],[11,"new_text",E,"Create a new text node.",7,[[["into",[R[39]]],[R[39]]],[R[81]]]],[11,"new_comment",E,"Create a new comment node.",7,[[["into",[R[39]]],[R[39]]],[R[81]]]],[11,"new_processing_instruction",E,"Create a new processing instruction node.",7,[[["t2"],["t1"]],[R[81]]]],[11,"new_doctype",E,"Create a new doctype node.",7,[[["t2"],["t1"],["t3"]],[R[81]]]],[11,"new_document",E,"Create a new document node.",7,[[],[R[81]]]],[11,R[85],E,R[86],7,[[["self"]],[R[39]]]],[11,"data",E,"Return a reference to this node’s node-type-specific data.",19,[[["self"]],[R[87]]]],[11,"as_element",E,"If this node is an element, return a reference to…",19,[[["self"]],[[R[5],[R[80]]],[R[80]]]]],[11,"as_text",E,"If this node is a text node, return a reference to its…",19,[[["self"]],[[R[88]],[R[5],[R[88]]]]]],[11,"as_comment",E,"If this node is a comment, return a reference to its…",19,[[["self"]],[[R[88]],[R[5],[R[88]]]]]],[11,"as_doctype",E,R[90],19,[[["self"]],[[R[5],[R[89]]],[R[89]]]]],[11,"as_document",E,R[90],19,[[["self"]],[[R[5],[R[91]]],[R[91]]]]],[11,"parent",E,"Return a reference to the parent node, unless this node is…",19,[[["self"]],[[R[81]],[R[5],[R[81]]]]]],[11,"first_child",E,"Return a reference to the first child of this node, unless…",19,[[["self"]],[[R[81]],[R[5],[R[81]]]]]],[11,"last_child",E,"Return a reference to the last child of this node, unless…",19,[[["self"]],[[R[81]],[R[5],[R[81]]]]]],[11,"previous_sibling",E,R[92],19,[[["self"]],[[R[81]],[R[5],[R[81]]]]]],[11,"next_sibling",E,R[92],19,[[["self"]],[[R[81]],[R[5],[R[81]]]]]],[11,"detach",E,"Detach a node from its parent and siblings. Children are…",19,[[["self"]]]],[11,"append",E,"Append a new child to this node, after existing children.",7,[[[R[81]],["self"]]]],[11,"prepend",E,"Prepend a new child to this node, before existing children.",7,[[[R[81]],["self"]]]],[11,"insert_after",E,"Insert a new sibling after this node.",7,[[[R[81]],["self"]]]],[11,"insert_before",E,"Insert a new sibling before this node.",7,[[[R[81]],["self"]]]],[0,"traits",E,"This module re-exports a number of traits that are useful…",N,N],[8,R[115],"kuchiki::traits","Trait for types that can process a tendril.",N,N],[10,"process",E,"Process this tendril.",20,[[["self"],["tendril"]]]],[10,"error",E,"Indicates that an error has occurred.",20,[[["str"],["self"],["cow",["str"]]]]],[16,"Output",E,"What the overall result of processing is.",20,N],[10,"finish",E,"Indicates the end of the stream.",20,[[]]],[11,"one",E,"Process one tendril and finish.",20,[[[T]]]],[11,"from_iter",E,"Consume an iterator of tendrils, processing each item,…",20,[[["i"]]]],[11,"read_from",E,"Read from the given stream of bytes until exhaustion and…",20,[[["r"]],[[R[2],["error"]],["error"]]]],[11,"from_file",E,"Read from the file at the given path and process…",20,[[["p"]],[[R[2],["error"]],["error"]]]],[11,"into",R[93],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[21],E,E,0,[[["self"],[T]]]],[11,R[17],E,E,0,[[[U]],[R[2]]]],[11,R[18],E,E,0,[[],[R[2]]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[24]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[20],E,E,1,[[["self"]],[T]]],[11,R[21],E,E,1,[[["self"],[T]]]],[11,R[17],E,E,1,[[[U]],[R[2]]]],[11,R[18],E,E,1,[[],[R[2]]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[R[24]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[20],E,E,2,[[["self"]],[T]]],[11,R[21],E,E,2,[[["self"],[T]]]],[11,R[17],E,E,2,[[[U]],[R[2]]]],[11,R[18],E,E,2,[[],[R[2]]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[19],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[R[24]]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[20],E,E,16,[[["self"]],[T]]],[11,R[21],E,E,16,[[["self"],[T]]]],[11,R[17],E,E,16,[[[U]],[R[2]]]],[11,R[18],E,E,16,[[],[R[2]]]],[11,R[23],E,E,16,[[["self"]],[T]]],[11,R[19],E,E,16,[[["self"]],[T]]],[11,R[22],E,E,16,[[["self"]],[R[24]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[17],E,E,3,[[[U]],[R[2]]]],[11,R[18],E,E,3,[[],[R[2]]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[19],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[R[24]]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[25],E,E,17,[[["self"]],[R[39]]]],[11,R[17],E,E,17,[[[U]],[R[2]]]],[11,R[18],E,E,17,[[],[R[2]]]],[11,R[23],E,E,17,[[["self"]],[T]]],[11,R[19],E,E,17,[[["self"]],[T]]],[11,R[22],E,E,17,[[["self"]],[R[24]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[25],E,E,4,[[["self"]],[R[39]]]],[11,R[17],E,E,4,[[[U]],[R[2]]]],[11,R[18],E,E,4,[[],[R[2]]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[19],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[R[24]]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[20],E,E,21,[[["self"]],[T]]],[11,R[21],E,E,21,[[["self"],[T]]]],[11,R[17],E,E,21,[[[U]],[R[2]]]],[11,R[18],E,E,21,[[],[R[2]]]],[11,R[23],E,E,21,[[["self"]],[T]]],[11,R[19],E,E,21,[[["self"]],[T]]],[11,R[22],E,E,21,[[["self"]],[R[24]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[20],E,E,5,[[["self"]],[T]]],[11,R[21],E,E,5,[[["self"],[T]]]],[11,R[17],E,E,5,[[[U]],[R[2]]]],[11,R[18],E,E,5,[[],[R[2]]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[19],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[R[24]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[20],E,E,18,[[["self"]],[T]]],[11,R[21],E,E,18,[[["self"],[T]]]],[11,R[17],E,E,18,[[[U]],[R[2]]]],[11,R[18],E,E,18,[[],[R[2]]]],[11,R[23],E,E,18,[[["self"]],[T]]],[11,R[19],E,E,18,[[["self"]],[T]]],[11,R[22],E,E,18,[[["self"]],[R[24]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[20],E,E,6,[[["self"]],[T]]],[11,R[21],E,E,6,[[["self"],[T]]]],[11,R[17],E,E,6,[[[U]],[R[2]]]],[11,R[18],E,E,6,[[],[R[2]]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[19],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[R[24]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[17],E,E,19,[[[U]],[R[2]]]],[11,R[18],E,E,19,[[],[R[2]]]],[11,R[23],E,E,19,[[["self"]],[T]]],[11,R[19],E,E,19,[[["self"]],[T]]],[11,R[22],E,E,19,[[["self"]],[R[24]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[20],E,E,7,[[["self"]],[T]]],[11,R[21],E,E,7,[[["self"],[T]]]],[11,R[25],E,E,7,[[["self"]],[R[39]]]],[11,R[17],E,E,7,[[[U]],[R[2]]]],[11,R[18],E,E,7,[[],[R[2]]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[19],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[R[24]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[20],E,E,8,[[["self"]],[T]]],[11,R[21],E,E,8,[[["self"],[T]]]],[11,R[17],E,E,8,[[[U]],[R[2]]]],[11,R[18],E,E,8,[[],[R[2]]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[19],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[R[24]]]],[11,"into",R[94],E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[95],E,E,22,[[],["i"]]],[11,R[20],E,E,22,[[["self"]],[T]]],[11,R[21],E,E,22,[[["self"],[T]]]],[11,R[17],E,E,22,[[[U]],[R[2]]]],[11,R[18],E,E,22,[[],[R[2]]]],[11,R[23],E,E,22,[[["self"]],[T]]],[11,R[19],E,E,22,[[["self"]],[T]]],[11,R[22],E,E,22,[[["self"]],[R[24]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[95],E,E,23,[[],["i"]]],[11,R[20],E,E,23,[[["self"]],[T]]],[11,R[21],E,E,23,[[["self"],[T]]]],[11,R[17],E,E,23,[[[U]],[R[2]]]],[11,R[18],E,E,23,[[],[R[2]]]],[11,R[23],E,E,23,[[["self"]],[T]]],[11,R[19],E,E,23,[[["self"]],[T]]],[11,R[22],E,E,23,[[["self"]],[R[24]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[95],E,E,24,[[],["i"]]],[11,R[20],E,E,24,[[["self"]],[T]]],[11,R[21],E,E,24,[[["self"],[T]]]],[11,R[17],E,E,24,[[[U]],[R[2]]]],[11,R[18],E,E,24,[[],[R[2]]]],[11,R[23],E,E,24,[[["self"]],[T]]],[11,R[19],E,E,24,[[["self"]],[T]]],[11,R[22],E,E,24,[[["self"]],[R[24]]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[95],E,E,25,[[],["i"]]],[11,R[20],E,E,25,[[["self"]],[T]]],[11,R[21],E,E,25,[[["self"],[T]]]],[11,R[17],E,E,25,[[[U]],[R[2]]]],[11,R[18],E,E,25,[[],[R[2]]]],[11,R[23],E,E,25,[[["self"]],[T]]],[11,R[19],E,E,25,[[["self"]],[T]]],[11,R[22],E,E,25,[[["self"]],[R[24]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[95],E,E,9,[[],["i"]]],[11,R[20],E,E,9,[[["self"]],[T]]],[11,R[21],E,E,9,[[["self"],[T]]]],[11,R[17],E,E,9,[[[U]],[R[2]]]],[11,R[18],E,E,9,[[],[R[2]]]],[11,R[23],E,E,9,[[["self"]],[T]]],[11,R[19],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[R[24]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[95],E,E,10,[[],["i"]]],[11,R[20],E,E,10,[[["self"]],[T]]],[11,R[21],E,E,10,[[["self"],[T]]]],[11,R[17],E,E,10,[[[U]],[R[2]]]],[11,R[18],E,E,10,[[],[R[2]]]],[11,R[23],E,E,10,[[["self"]],[T]]],[11,R[19],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[R[24]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[95],E,E,11,[[],["i"]]],[11,R[20],E,E,11,[[["self"]],[T]]],[11,R[21],E,E,11,[[["self"],[T]]]],[11,R[17],E,E,11,[[[U]],[R[2]]]],[11,R[18],E,E,11,[[],[R[2]]]],[11,R[23],E,E,11,[[["self"]],[T]]],[11,R[19],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"]],[R[24]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[95],E,E,12,[[],["i"]]],[11,R[17],E,E,12,[[[U]],[R[2]]]],[11,R[18],E,E,12,[[],[R[2]]]],[11,R[23],E,E,12,[[["self"]],[T]]],[11,R[19],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"]],[R[24]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[20],E,E,13,[[["self"]],[T]]],[11,R[21],E,E,13,[[["self"],[T]]]],[11,R[17],E,E,13,[[[U]],[R[2]]]],[11,R[18],E,E,13,[[],[R[2]]]],[11,R[23],E,E,13,[[["self"]],[T]]],[11,R[19],E,E,13,[[["self"]],[T]]],[11,R[22],E,E,13,[[["self"]],[R[24]]]],[11,"drop",R[93],E,19,[[["self"]]]],[11,"next",R[94],E,22,[[["self"]],[[R[81]],[R[5],[R[81]]]]]],[11,"next",E,E,23,[[["self"]],[[R[81]],[R[5],[R[81]]]]]],[11,"next",E,E,24,[[["self"]],[[R[81]],[R[5],[R[81]]]]]],[11,"next",E,E,25,[[["self"]],[[R[5],[R[96]]],[R[96],[R[81]]]]]],[11,"next",E,E,9,[[["self"]],[[R[79],[R[80]]],[R[5],[R[79]]]]]],[11,"next",E,E,10,[[["self"]],[[R[79],[R[88]]],[R[5],[R[79]]]]]],[11,"next",E,E,11,[[["self"]],[[R[79],[R[88]]],[R[5],[R[79]]]]]],[11,"next",E,E,12,[[["self"]],[[R[79],[R[80]]],[R[5],[R[79]]]]]],[11,R[97],E,E,22,[[["self"]],[[R[81]],[R[5],[R[81]]]]]],[11,R[97],E,E,24,[[["self"]],[[R[81]],[R[5],[R[81]]]]]],[11,R[97],E,E,25,[[["self"]],[[R[5],[R[96]]],[R[96],[R[81]]]]]],[11,R[97],E,E,9,[[["self"]],[[R[79],[R[80]]],[R[5],[R[79]]]]]],[11,R[97],E,E,10,[[["self"]],[[R[79],[R[88]]],[R[5],[R[79]]]]]],[11,R[97],E,E,11,[[["self"]],[[R[79],[R[88]]],[R[5],[R[79]]]]]],[11,R[97],E,E,12,[[["self"]],[[R[79],[R[80]]],[R[5],[R[79]]]]]],[11,"clone",R[93],E,1,[[["self"]],[R[98]]]],[11,"clone",E,E,2,[[["self"]],[R[67]]]],[11,"clone",E,E,0,[[["self"]],[R[68]]]],[11,"clone",R[94],E,22,[[["self"]],[R[73]]]],[11,"clone",E,E,23,[[["self"]],[R[72]]]],[11,"clone",E,E,24,[[["self"]],[R[77]]]],[11,"clone",E,E,13,[[["self"]],[R[96]]]],[11,"clone",E,E,25,[[["self"]],[R[78]]]],[11,"clone",E,E,9,[[["self"]],[R[69]]]],[11,"clone",E,E,10,[[["self"]],[R[70]]]],[11,"clone",E,E,11,[[["self"]],[R[99]]]],[11,"clone",R[93],E,16,[[["self"]],["self"]]],[11,"clone",E,E,21,[[["self"]],[R[83]]]],[11,"clone",E,E,8,[[["self"]],[R[87]]]],[11,"clone",E,E,5,[[["self"]],[R[89]]]],[11,"clone",E,E,6,[[["self"]],[R[80]]]],[11,"clone",E,E,18,[[["self"]],[R[91]]]],[11,"clone",E,E,7,[[["self"]],[R[81]]]],[11,"default",E,E,3,[[],[R[100]]]],[11,"cmp",E,E,2,[[[R[67]],["self"]],[R[26]]]],[11,"cmp",E,E,21,[[[R[83]],["self"]],[R[26]]]],[11,"eq",E,E,1,[[["self"],[R[98]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[98]]],["bool"]]],[11,"eq",E,E,2,[[[R[67]],["self"]],["bool"]]],[11,"ne",E,E,2,[[[R[67]],["self"]],["bool"]]],[11,"eq",E,E,0,[[[R[68]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[68]],["self"]],["bool"]]],[11,"eq",R[94],E,13,[[[R[96]],["self"]],["bool"]]],[11,"ne",E,E,13,[[[R[96]],["self"]],["bool"]]],[11,"eq",R[93],E,16,[[["self"]],["bool"]]],[11,"eq",E,E,21,[[[R[83]],["self"]],["bool"]]],[11,"ne",E,E,21,[[[R[83]],["self"]],["bool"]]],[11,"eq",E,E,8,[[[R[87]],["self"]],["bool"]]],[11,"ne",E,E,8,[[[R[87]],["self"]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[89]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[89]]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[80]]],["bool"]]],[11,"ne",E,E,6,[[["self"],[R[80]]],["bool"]]],[11,"eq",E,E,18,[[["self"],[R[91]]],["bool"]]],[11,"ne",E,E,18,[[["self"],[R[91]]],["bool"]]],[11,"eq",E,E,7,[[[R[81]],["self"]],["bool"]]],[11,R[28],E,E,2,[[[R[67]],["self"]],[[R[5],[R[26]]],[R[26]]]]],[11,"lt",E,E,2,[[[R[67]],["self"]],["bool"]]],[11,"le",E,E,2,[[[R[67]],["self"]],["bool"]]],[11,"gt",E,E,2,[[[R[67]],["self"]],["bool"]]],[11,"ge",E,E,2,[[[R[67]],["self"]],["bool"]]],[11,R[28],E,E,21,[[[R[83]],["self"]],[[R[5],[R[26]]],[R[26]]]]],[11,"lt",E,E,21,[[[R[83]],["self"]],["bool"]]],[11,"le",E,E,21,[[[R[83]],["self"]],["bool"]]],[11,"gt",E,E,21,[[[R[83]],["self"]],["bool"]]],[11,"ge",E,E,21,[[[R[83]],["self"]],["bool"]]],[11,R[25],E,E,7,[[["self"]],[R[39]]]],[11,"fmt",E,E,17,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",R[94],E,22,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,23,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,24,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,13,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,25,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,9,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,10,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,11,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",R[93],E,16,[[["self"],[R[29]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,17,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,8,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,6,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,18,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,7,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,19,[[["self"],[R[29]]],[[R[2],["error"]],["error"]]]],[11,R[30],E,E,4,[[["str"]],[[R[2],[R[82]]],[R[82]]]]],[11,"deref",E,E,16,[[["self"]],[T]]],[11,"deref",E,E,7,[[["self"]],["node"]]],[11,"hash",E,E,2,[[["self"],["__h"]]]],[11,"hash",E,E,21,[[["self"],["__h"]]]],[11,R[101],E,E,7,[[["traversalscope"],["s"],["self"]],[R[2]]]],[11,"opaque",E,E,16,[[["self"]],["opaqueelement"]]],[11,"is_html_slot_element",E,E,16,[[["self"]],["bool"]]],[11,"parent_node_is_shadow_root",E,E,16,[[["self"]],["bool"]]],[11,"containing_shadow_host",E,E,16,[[["self"]],[R[5]]]],[11,"parent_element",E,E,16,[[["self"]],[R[5]]]],[11,"prev_sibling_element",E,E,16,[[["self"]],[R[5]]]],[11,"next_sibling_element",E,E,16,[[["self"]],[R[5]]]],[11,"is_empty",E,E,16,[[["self"]],["bool"]]],[11,"is_root",E,E,16,[[["self"]],["bool"]]],[11,"is_html_element_in_html_document",E,E,16,[[["self"]],["bool"]]],[11,"has_local_name",E,E,16,[[[R[66]],["self"]],["bool"]]],[11,"has_namespace",E,E,16,[[[R[65]],["self"]],["bool"]]],[11,"is_part",E,E,16,[[[R[66]],["self"]],["bool"]]],[11,"exported_part",E,E,16,[[[R[66]],["self"]],[[R[5],[R[66]]],[R[66]]]]],[11,"imported_part",E,E,16,[[[R[66]],["self"]],[[R[5],[R[66]]],[R[66]]]]],[11,"is_pseudo_element",E,E,16,[[["self"]],["bool"]]],[11,"is_same_type",E,E,16,[[["self"]],["bool"]]],[11,"is_link",E,E,16,[[["self"]],["bool"]]],[11,"has_id",E,E,16,[[[R[66]],[R[102]],["self"]],["bool"]]],[11,"has_class",E,E,16,[[[R[66]],[R[102]],["self"]],["bool"]]],[11,"attr_matches",E,E,16,[[["attrselectoroperation"],["namespaceconstraint"],[R[66]],["self"]],["bool"]]],[11,"match_pseudo_element",E,E,16,[[[R[103]],["pseudoelement"],["self"]],["bool"]]],[11,"match_non_ts_pseudo_class",E,E,16,[[[R[103]],["f"],["self"],["pseudoclass"]],["bool"]]]],"p":[[3,R[104]],[3,R[105]],[3,R[106]],[3,R[107]],[3,R[108]],[3,"Doctype"],[3,R[109]],[3,"NodeRef"],[4,"NodeData"],[3,"Elements"],[3,"Comments"],[3,R[110]],[3,"Select"],[4,"NodeEdge"],[8,R[111]],[8,R[112]],[3,R[113]],[3,"Selector"],[3,R[114]],[3,"Node"],[8,R[115]],[3,R[116]],[3,"Siblings"],[3,R[117]],[3,R[118]],[3,"Traverse"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","i":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,R[32],E,"Builder for `Record`.",N,N],[3,R[33],E,"Metadata about a log message.",N,N],[3,R[34],E,"Builder for `Metadata`.",N,N],[3,R[35],E,"The type returned by [`set_logger`] if [`set_logger`] has…",N,N],[3,R[36],E,"The type returned by [`from_str`] when the string doesn't…",N,N],[4,"Level",E,"An enum representing the available verbosity levels of the…",N,N],[13,"Error",E,"The \"error\" level.",0,N],[13,"Warn",E,"The \"warn\" level.",0,N],[13,"Info",E,"The \"info\" level.",0,N],[13,"Debug",E,"The \"debug\" level.",0,N],[13,"Trace",E,"The \"trace\" level.",0,N],[4,R[31],E,"An enum representing the available verbosity level filters…",N,N],[13,"Off",E,"A level lower than all log levels.",1,N],[13,"Error",E,"Corresponds to the `Error` log level.",1,N],[13,"Warn",E,"Corresponds to the `Warn` log level.",1,N],[13,"Info",E,"Corresponds to the `Info` log level.",1,N],[13,"Debug",E,"Corresponds to the `Debug` log level.",1,N],[13,"Trace",E,"Corresponds to the `Trace` log level.",1,N],[5,"set_max_level",E,"Sets the global maximum log level.",N,[[[R[0]]]]],[5,"max_level",E,"Returns the current maximum log level.",N,[[],[R[0]]]],[5,"set_boxed_logger",E,"Sets the global logger to a `Box<Log>`.",N,[[["log"],["box",["log"]]],[[R[1]],[R[2],[R[1]]]]]],[5,"set_logger",E,"Sets the global logger to a `&'static Log`.",N,[[["log"]],[[R[1]],[R[2],[R[1]]]]]],[5,"set_logger_racy",E,"A thread-unsafe version of [`set_logger`].",N,[[["log"]],[[R[1]],[R[2],[R[1]]]]]],[5,"logger",E,"Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL",E,"The statically resolved maximum log level.",N,N],[8,"Log",E,"A trait encapsulating the operations required of a logger.",N,N],[10,"enabled",E,"Determines if a log message with the specified metadata…",2,[[[R[3]],["self"]],["bool"]]],[10,"log",E,"Logs the `Record`.",2,[[["record"],["self"]]]],[10,"flush",E,"Flushes any buffered records.",2,[[["self"]]]],[11,"max",E,"Returns the most verbose logging level.",0,[[],[R[4]]]],[11,"to_level_filter",E,"Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],[R[0]]]],[11,"max",E,"Returns the most verbose logging level filter.",1,[[],[R[0]]]],[11,"to_level",E,"Converts `self` to the equivalent `Level`.",1,[[["self"]],[[R[4]],[R[5],[R[4]]]]]],[11,"builder",E,R[13],3,[[],[R[7]]]],[11,"args",E,"The message body.",3,[[["self"]],[R[8]]]],[11,R[3],E,"Metadata about the log directive.",3,[[["self"]],[R[3]]]],[11,R[4],E,R[14],3,[[["self"]],[R[4]]]],[11,R[9],E,R[15],3,[[["self"]],["str"]]],[11,R[10],E,"The module path of the message.",3,[[["self"]],[[R[5],["str"]],["str"]]]],[11,R[11],E,R[6],3,[[["self"]],[[R[5],["str"]],["str"]]]],[11,"file",E,"The source file containing the message.",3,[[["self"]],[[R[5],["str"]],["str"]]]],[11,R[12],E,R[6],3,[[["self"]],[[R[5],["str"]],["str"]]]],[11,"line",E,"The line containing the message.",3,[[["self"]],[["u32"],[R[5],["u32"]]]]],[11,"new",E,"Construct new `RecordBuilder`.",4,[[],[R[7]]]],[11,"args",E,"Set `args`.",4,[[[R[8]],["self"]],[R[7]]]],[11,R[3],E,"Set `metadata`. Construct a `Metadata` object with…",4,[[[R[3]],["self"]],[R[7]]]],[11,R[4],E,"Set `Metadata::level`.",4,[[["self"],[R[4]]],[R[7]]]],[11,R[9],E,"Set `Metadata::target`",4,[[["self"],["str"]],[R[7]]]],[11,R[10],E,"Set `module_path`",4,[[[R[5],["str"]],["self"],["str"]],[R[7]]]],[11,R[11],E,"Set `module_path` to a `'static` string",4,[[["self"],[R[5],["str"]],["str"]],[R[7]]]],[11,"file",E,"Set `file`",4,[[[R[5],["str"]],["self"],["str"]],[R[7]]]],[11,R[12],E,"Set `file` to a `'static` string.",4,[[["self"],[R[5],["str"]],["str"]],[R[7]]]],[11,"line",E,"Set `line`",4,[[["self"],["u32"],[R[5],["u32"]]],[R[7]]]],[11,"build",E,"Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"builder",E,R[13],5,[[],[R[16]]]],[11,R[4],E,R[14],5,[[["self"]],[R[4]]]],[11,R[9],E,R[15],5,[[["self"]],["str"]]],[11,"new",E,"Construct a new `MetadataBuilder`.",6,[[],[R[16]]]],[11,R[4],E,"Setter for `level`.",6,[[["self"],[R[4]]],[R[16]]]],[11,R[9],E,"Setter for `target`.",6,[[["self"],["str"]],[R[16]]]],[11,"build",E,"Returns a `Metadata` object.",6,[[["self"]],[R[3]]]],[14,"log",E,"The standard logging macro.",N,N],[14,"error",E,"Logs a message at the error level.",N,N],[14,"warn",E,"Logs a message at the warn level.",N,N],[14,"info",E,"Logs a message at the info level.",N,N],[14,"debug",E,"Logs a message at the debug level.",N,N],[14,"trace",E,"Logs a message at the trace level.",N,N],[14,"log_enabled",E,"Determines if a message logged at the specified level in…",N,N],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[20],E,E,3,[[["self"]],[T]]],[11,R[21],E,E,3,[[["self"],[T]]]],[11,R[17],E,E,3,[[[U]],[R[2]]]],[11,R[18],E,E,3,[[],[R[2]]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[19],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[R[24]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[17],E,E,4,[[[U]],[R[2]]]],[11,R[18],E,E,4,[[],[R[2]]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[19],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[R[24]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[20],E,E,5,[[["self"]],[T]]],[11,R[21],E,E,5,[[["self"],[T]]]],[11,R[17],E,E,5,[[[U]],[R[2]]]],[11,R[18],E,E,5,[[],[R[2]]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[19],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[R[24]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[17],E,E,6,[[[U]],[R[2]]]],[11,R[18],E,E,6,[[],[R[2]]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[19],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[R[24]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[25],E,E,7,[[["self"]],[R[39]]]],[11,R[17],E,E,7,[[[U]],[R[2]]]],[11,R[18],E,E,7,[[],[R[2]]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[19],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[R[24]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[25],E,E,8,[[["self"]],[R[39]]]],[11,R[17],E,E,8,[[[U]],[R[2]]]],[11,R[18],E,E,8,[[],[R[2]]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[19],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[21],E,E,0,[[["self"],[T]]]],[11,R[25],E,E,0,[[["self"]],[R[39]]]],[11,R[17],E,E,0,[[[U]],[R[2]]]],[11,R[18],E,E,0,[[],[R[2]]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[24]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[20],E,E,1,[[["self"]],[T]]],[11,R[21],E,E,1,[[["self"],[T]]]],[11,R[25],E,E,1,[[["self"]],[R[39]]]],[11,R[17],E,E,1,[[[U]],[R[2]]]],[11,R[18],E,E,1,[[],[R[2]]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[R[24]]]],[11,"clone",E,E,0,[[["self"]],[R[4]]]],[11,"clone",E,E,1,[[["self"]],[R[0]]]],[11,"clone",E,E,3,[[["self"]],["record"]]],[11,"clone",E,E,5,[[["self"]],[R[3]]]],[11,"cmp",E,E,0,[[["self"],[R[4]]],[R[26]]]],[11,"cmp",E,E,1,[[["self"],[R[0]]],[R[26]]]],[11,"cmp",E,E,5,[[[R[3]],["self"]],[R[26]]]],[11,"cmp",E,E,6,[[[R[16]],["self"]],[R[26]]]],[11,"eq",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[4]]],["bool"]]],[11,"eq",E,E,5,[[[R[3]],["self"]],["bool"]]],[11,"ne",E,E,5,[[[R[3]],["self"]],["bool"]]],[11,"eq",E,E,6,[[[R[16]],["self"]],["bool"]]],[11,"ne",E,E,6,[[[R[16]],["self"]],["bool"]]],[11,"eq",E,E,8,[[[R[27]],["self"]],["bool"]]],[11,"ne",E,E,8,[[[R[27]],["self"]],["bool"]]],[11,R[28],E,E,0,[[["self"],[R[4]]],[[R[5],[R[26]]],[R[26]]]]],[11,"lt",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,R[28],E,E,0,[[["self"],[R[0]]],[[R[5],[R[26]]],[R[26]]]]],[11,"lt",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,R[28],E,E,1,[[["self"],[R[0]]],[[R[5],[R[26]]],[R[26]]]]],[11,"lt",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,R[28],E,E,1,[[["self"],[R[4]]],[[R[5],[R[26]]],[R[26]]]]],[11,"lt",E,E,1,[[["self"],[R[4]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[4]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[4]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[4]]],["bool"]]],[11,R[28],E,E,5,[[[R[3]],["self"]],[[R[5],[R[26]]],[R[26]]]]],[11,"lt",E,E,5,[[[R[3]],["self"]],["bool"]]],[11,"le",E,E,5,[[[R[3]],["self"]],["bool"]]],[11,"gt",E,E,5,[[[R[3]],["self"]],["bool"]]],[11,"ge",E,E,5,[[[R[3]],["self"]],["bool"]]],[11,R[28],E,E,6,[[[R[16]],["self"]],[[R[5],[R[26]]],[R[26]]]]],[11,"lt",E,E,6,[[[R[16]],["self"]],["bool"]]],[11,"le",E,E,6,[[[R[16]],["self"]],["bool"]]],[11,"gt",E,E,6,[[[R[16]],["self"]],["bool"]]],[11,"ge",E,E,6,[[[R[16]],["self"]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,7,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,8,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,6,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,7,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,8,[[["self"],[R[29]]],[R[2]]]],[11,R[30],E,E,0,[[["str"]],[[R[4]],[R[2],[R[4]]]]]],[11,R[30],E,E,1,[[["str"]],[[R[2],[R[0]]],[R[0]]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"hash",E,E,1,[[["self"],["__h"]]]],[11,"hash",E,E,5,[[["self"],["__h"]]]],[11,"hash",E,E,6,[[["self"],["__h"]]]]],"p":[[4,"Level"],[4,R[31]],[8,"Log"],[3,"Record"],[3,R[32]],[3,R[33]],[3,R[34]],[3,R[35]],[3,R[36]]]};
searchIndex["rand_core"]={"doc":"Random number generation traits","i":[[3,"Error",R[48],"Error type of random number generators",N,N],[3,"OsRng",E,"A random number generator that retrieves randomness from…",N,N],[11,"new",E,"Construct from any type supporting `std::error::Error`",0,[[["e"]],["self"]]],[11,"inner",E,"Reference the inner error (`std` only)",0,[[["self"]],["error"]]],[11,"take_inner",E,"Unwrap the inner error (`std` only)",0,[[],[["error"],["box",["error"]]]]],[18,"INTERNAL_START",E,"Codes below this point represent OS Errors (i.e. positive…",0,N],[18,"CUSTOM_START",E,"Codes at or above this point can be used by users to…",0,N],[11,"raw_os_error",E,"Extract the raw OS error code (if this error came from the…",0,[[["self"]],[[R[5],["i32"]],["i32"]]]],[11,"code",E,"Retrieve the error code, if any.",0,[[["self"]],[[R[40]],[R[5],[R[40]]]]]],[0,"block",E,"The `BlockRngCore` trait and implementation helpers",N,N],[3,R[61],R[50],R[41],N,N],[12,"core",E,R[42],1,N],[3,R[62],E,R[41],N,N],[12,"core",E,R[42],2,N],[8,R[63],E,"A trait for RNGs which do not generate random numbers…",N,N],[16,"Item",E,"Results element type, e.g. `u32`.",3,N],[16,"Results",E,"Results type. This is the 'block' an RNG implementing…",3,N],[10,"generate",E,"Generate a new block of results.",3,[[["self"]]]],[11,"new",E,R[43],1,[[["r"]],[R[59]]]],[11,"index",E,R[44],1,[[["self"]],["usize"]]],[11,"reset",E,R[45],1,[[["self"]]]],[11,R[46],E,R[47],1,[[["self"],["usize"]]]],[11,"new",E,R[43],2,[[["r"]],[R[60]]]],[11,"index",E,R[44],2,[[["self"]],["usize"]]],[11,"reset",E,R[45],2,[[["self"]]]],[11,R[46],E,R[47],2,[[["self"],["usize"]]]],[0,"impls",R[48],"Helper functions for implementing `RngCore` functions.",N,N],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",N,[[["r"]],["u64"]]],[5,"fill_bytes_via_next",E,"Implement `fill_bytes` via `next_u64` and `next_u32`,…",N,[[["r"]]]],[5,"fill_via_u32_chunks",E,R[49],N,[[]]],[5,"fill_via_u64_chunks",E,R[49],N,[[]]],[5,"next_u32_via_fill",E,"Implement `next_u32` via `fill_bytes`, little-endian order.",N,[[["r"]],["u32"]]],[5,"next_u64_via_fill",E,"Implement `next_u64` via `fill_bytes`, little-endian order.",N,[[["r"]],["u64"]]],[0,"le",R[48],"Little-Endian utilities",N,N],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`.…",N,[[]]],[5,"read_u64_into",E,"Reads unsigned 64 bit integers from `src` into `dst`.…",N,[[]]],[8,"RngCore",R[48],"The core of a random number generator.",N,N],[10,R[51],E,"Return the next random `u32`.",4,[[["self"]],["u32"]]],[10,R[52],E,"Return the next random `u64`.",4,[[["self"]],["u64"]]],[10,R[53],E,"Fill `dest` with random data.",4,[[["self"]]]],[10,R[54],E,"Fill `dest` entirely with random data.",4,[[["self"]],[["error"],[R[2],["error"]]]]],[8,"CryptoRng",E,"A marker trait used to indicate that an [`RngCore`] or…",N,N],[8,R[64],E,"A random number generator that can be explicitly seeded.",N,N],[16,"Seed",E,"Seed type, which is restricted to types…",5,N],[10,R[55],E,"Create a new PRNG using the given seed.",5,[[],["self"]]],[11,R[56],E,"Create a new PRNG using a `u64` seed.",5,[[["u64"]],["self"]]],[11,R[57],E,"Create a new PRNG seeded from another `Rng`.",5,[[[R[58]]],[["error"],[R[2],["error"]]]]],[11,"from_entropy",E,"Creates a new instance of the RNG seeded via [`getrandom`].",5,[[],["self"]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[39]]]],[11,R[17],E,E,0,[[[U]],[R[2]]]],[11,R[18],E,E,0,[[],[R[2]]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[24]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[20],E,E,6,[[["self"]],[T]]],[11,R[21],E,E,6,[[["self"],[T]]]],[11,R[17],E,E,6,[[[U]],[R[2]]]],[11,R[18],E,E,6,[[],[R[2]]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[19],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[R[24]]]],[11,"into",R[50],E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[20],E,E,1,[[["self"]],[T]]],[11,R[21],E,E,1,[[["self"],[T]]]],[11,R[17],E,E,1,[[[U]],[R[2]]]],[11,R[18],E,E,1,[[],[R[2]]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[R[24]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[20],E,E,2,[[["self"]],[T]]],[11,R[21],E,E,2,[[["self"],[T]]]],[11,R[17],E,E,2,[[[U]],[R[2]]]],[11,R[18],E,E,2,[[],[R[2]]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[19],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[R[24]]]],[11,R[51],E,E,1,[[["self"]],["u32"]]],[11,R[52],E,E,1,[[["self"]],["u64"]]],[11,R[53],E,E,1,[[["self"]]]],[11,R[54],E,E,1,[[["self"]],[["error"],[R[2],["error"]]]]],[11,R[51],E,E,2,[[["self"]],["u32"]]],[11,R[52],E,E,2,[[["self"]],["u64"]]],[11,R[53],E,E,2,[[["self"]]]],[11,R[54],E,E,2,[[["self"]],[["error"],[R[2],["error"]]]]],[11,R[51],R[48],E,6,[[["self"]],["u32"]]],[11,R[52],E,E,6,[[["self"]],["u64"]]],[11,R[53],E,E,6,[[["self"]]]],[11,R[54],E,E,6,[[["self"]],[["error"],[R[2],["error"]]]]],[11,R[55],R[50],E,1,[[],["self"]]],[11,R[56],E,E,1,[[["u64"]],["self"]]],[11,R[57],E,E,1,[[[R[58]]],[["error"],[R[2],["error"]]]]],[11,R[55],E,E,2,[[],["self"]]],[11,R[56],E,E,2,[[["u64"]],["self"]]],[11,R[57],E,E,2,[[[R[58]]],[["error"],[R[2],["error"]]]]],[11,"from",R[48],E,0,[[[R[40]]],["self"]]],[11,"from",E,E,0,[[["error"]],["self"]]],[11,"clone",R[50],E,1,[[["self"]],[R[59]]]],[11,"clone",E,E,2,[[["self"]],[R[60]]]],[11,"clone",R[48],E,6,[[["self"]],["osrng"]]],[11,"default",E,E,6,[[],["osrng"]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",R[50],E,1,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[29]]],[R[2]]]],[11,"fmt",R[48],E,6,[[["self"],[R[29]]],[R[2]]]],[11,"source",E,E,0,[[["self"]],[[R[5],["error"]],["error"]]]],[11,"read",E,E,4,[[["self"]],[[R[2],["usize","error"]],["usize"],["error"]]]]],"p":[[3,"Error"],[3,R[61]],[3,R[62]],[8,R[63]],[8,"RngCore"],[8,R[64]],[3,"OsRng"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);